package randoopTest;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        staticSaltsABMC1_40.key2(byteArray51, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_59.key2(byteArray70, (int) (short) 10);
        staticSaltsABMC1_58.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray83, 10);
        staticSaltsABMC1_75.key2(byteArray83, 10);
        staticSaltsABMC1_58.key2(byteArray83, (int) '4');
        staticSaltsABMC1_40.key2(byteArray83, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray83, (int) (short) 100);
        java.lang.Class<?> wildcardClass94 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray35, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_40.key2(byteArray47, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_52.key2(byteArray63, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_71.key2(byteArray81, 0);
        staticSaltsABMC1_70.key2(byteArray81, (int) (byte) 1);
        staticSaltsABMC1_52.key2(byteArray81, (int) (byte) 0);
        staticSaltsABMC1_40.key2(byteArray81, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray81, (int) (short) 0);
        byte[] byteArray94 = null;
        staticSaltsABMC1_0.key2(byteArray94, (int) '4');
        java.lang.Class<?> wildcardClass97 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray45, 10);
        staticSaltsABMC1_0.key2(byteArray45, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_58.key2(byteArray68, 0);
        staticSaltsABMC1_50.key2(byteArray68, 100);
        staticSaltsABMC1_0.key2(byteArray68, (int) (byte) 10);
        byte[] byteArray77 = null;
        staticSaltsABMC1_0.key2(byteArray77, (int) (byte) -1);
        java.lang.Class<?> wildcardClass80 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_37.key2(byteArray48, 1);
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_62.key2(byteArray73, (int) (short) 10);
        staticSaltsABMC1_57.key2(byteArray73, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray81, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_78.key2(byteArray86, (int) (short) 1);
        staticSaltsABMC1_57.key2(byteArray86, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray86, 1);
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        staticSaltsABMC1_17.key2(byteArray25, 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) '4');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, (int) (short) -1);
        java.lang.Class<?> wildcardClass35 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_32.key2(byteArray43, (int) (short) 10);
        staticSaltsABMC1_24.key2(byteArray43, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_48.key2(byteArray59, (int) (byte) 1);
        staticSaltsABMC1_24.key2(byteArray59, 1);
        staticSaltsABMC1_0.key2(byteArray59, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_71.key2(byteArray81, 0);
        staticSaltsABMC1_70.key2(byteArray81, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray81, (int) (short) 10);
        byte[] byteArray90 = null;
        staticSaltsABMC1_0.key2(byteArray90, 0);
        byte[] byteArray93 = null;
        staticSaltsABMC1_0.key2(byteArray93, (int) (short) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        byte[] byteArray47 = null;
        staticSaltsABMC1_0.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_50.key2(byteArray60, 0);
        staticSaltsABMC1_0.key2(byteArray60, (int) (byte) 100);
        byte[] byteArray67 = null;
        staticSaltsABMC1_0.key2(byteArray67, (int) (byte) 0);
        java.lang.Class<?> wildcardClass70 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        byte[] byteArray42 = null;
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_50.key2(byteArray60, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_65.key2(byteArray75, 0);
        staticSaltsABMC1_50.key2(byteArray75, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_82.key2(byteArray85, (int) (short) 0);
        staticSaltsABMC1_50.key2(byteArray85, (int) (short) 0);
        staticSaltsABMC1_45.key2(byteArray85, 100);
        staticSaltsABMC1_0.key2(byteArray85, (int) '#');
        java.lang.Class<?> wildcardClass96 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_40.key2(byteArray50, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_40.key2(byteArray57, (-1));
        byte[] byteArray67 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_40.key2(byteArray67, 10);
        byte[] byteArray70 = null;
        staticSaltsABMC1_40.key2(byteArray70, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_81.key2(byteArray84, (int) (short) 0);
        staticSaltsABMC1_73.key2(byteArray84, 1);
        staticSaltsABMC1_40.key2(byteArray84, (-1));
        staticSaltsABMC1_0.key2(byteArray84, 0);
        byte[] byteArray95 = null;
        staticSaltsABMC1_0.key2(byteArray95, 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_9.key2(byteArray19, 0);
        staticSaltsABMC1_8.key2(byteArray19, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray19, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_28.key2(byteArray38, 0);
        byte[] byteArray43 = null;
        staticSaltsABMC1_28.key2(byteArray43, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray54, 10);
        staticSaltsABMC1_46.key2(byteArray54, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_67.key2(byteArray78, (int) (short) 10);
        staticSaltsABMC1_59.key2(byteArray78, (int) 'a');
        staticSaltsABMC1_46.key2(byteArray78, 1);
        staticSaltsABMC1_28.key2(byteArray78, 0);
        staticSaltsABMC1_0.key2(byteArray78, (int) ' ');
        byte[] byteArray89 = null;
        staticSaltsABMC1_0.key2(byteArray89, (int) ' ');
        byte[] byteArray92 = null;
        staticSaltsABMC1_0.key2(byteArray92, (int) (byte) -1);
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_21.key2(byteArray38, (-1));
        staticSaltsABMC1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_55.key2(byteArray65, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_70.key2(byteArray80, 0);
        staticSaltsABMC1_55.key2(byteArray80, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray80, (int) (short) -1);
        byte[] byteArray89 = null;
        staticSaltsABMC1_0.key2(byteArray89, (int) (byte) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        staticSaltsABMC1_40.key2(byteArray51, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_59.key2(byteArray70, (int) (short) 10);
        staticSaltsABMC1_58.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray83, 10);
        staticSaltsABMC1_75.key2(byteArray83, 10);
        staticSaltsABMC1_58.key2(byteArray83, (int) '4');
        staticSaltsABMC1_40.key2(byteArray83, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray83, (int) (short) 100);
        java.lang.Class<?> wildcardClass94 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABMC1_7.key2(byteArray9, (int) '#');
        staticSaltsABMC1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_14.key2(byteArray25, (int) (byte) 1);
        staticSaltsABMC1_6.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) (byte) -1);
        byte[] byteArray36 = null;
        staticSaltsABMC1_0.key2(byteArray36, (int) (short) 1);
        byte[] byteArray39 = null;
        staticSaltsABMC1_0.key2(byteArray39, (int) (byte) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray27, 10);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        staticSaltsABMC1_33.key2(byteArray44, 1);
        staticSaltsABMC1_0.key2(byteArray44, (-1));
        byte[] byteArray53 = null;
        staticSaltsABMC1_0.key2(byteArray53, 10);
        byte[] byteArray56 = null;
        staticSaltsABMC1_0.key2(byteArray56, (int) (short) 100);
        java.lang.Class<?> wildcardClass59 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        staticSaltsABMC1_17.key2(byteArray25, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_38.key2(byteArray49, (int) (short) 10);
        staticSaltsABMC1_30.key2(byteArray49, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray49, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_17.key2(byteArray58, 0);
        staticSaltsABMC1_0.key2(byteArray58, (int) '#');
        byte[] byteArray65 = null;
        staticSaltsABMC1_0.key2(byteArray65, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray84, 10);
        staticSaltsABMC1_76.key2(byteArray84, 10);
        staticSaltsABMC1_68.key2(byteArray84, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray84, (int) (short) 10);
        java.lang.Class<?> wildcardClass93 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        byte[] byteArray51 = null;
        staticSaltsABMC1_17.key2(byteArray51, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_54.key2(byteArray64, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_54.key2(byteArray71, (-1));
        staticSaltsABMC1_17.key2(byteArray71, (int) (byte) 0);
        byte[] byteArray78 = null;
        staticSaltsABMC1_17.key2(byteArray78, (int) (byte) 100);
        byte[] byteArray81 = null;
        staticSaltsABMC1_17.key2(byteArray81, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_17.key2(byteArray86, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray86, 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, 1);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABMC1_19.key2(byteArray35, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray48, 10);
        staticSaltsABMC1_40.key2(byteArray48, 10);
        staticSaltsABMC1_19.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_55.key2(byteArray74, (int) 'a');
        staticSaltsABMC1_19.key2(byteArray74, (int) '4');
        staticSaltsABMC1_0.key2(byteArray74, (int) ' ');
        java.lang.Class<?> wildcardClass83 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        byte[] byteArray38 = null;
        staticSaltsABMC1_24.key2(byteArray38, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_41.key2(byteArray51, 0);
        staticSaltsABMC1_24.key2(byteArray51, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_58.key2(byteArray64, (int) (short) 0);
        staticSaltsABMC1_24.key2(byteArray64, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 10);
        java.lang.Class<?> wildcardClass71 = byteArray64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray52, (int) 'a');
        staticSaltsABMC1_25.key2(byteArray52, 100);
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_69.key2(byteArray79, 0);
        staticSaltsABMC1_61.key2(byteArray79, 100);
        staticSaltsABMC1_0.key2(byteArray79, (int) (short) -1);
        java.lang.Class<?> wildcardClass88 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray35, (int) 'a');
        byte[] byteArray40 = null;
        staticSaltsABMC1_0.key2(byteArray40, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_43.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_60.key2(byteArray71, (int) (short) 10);
        staticSaltsABMC1_52.key2(byteArray71, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_76.key2(byteArray87, (int) (short) 10);
        staticSaltsABMC1_52.key2(byteArray87, (int) 'a');
        staticSaltsABMC1_43.key2(byteArray87, (-1));
        staticSaltsABMC1_0.key2(byteArray87, (-1));
        java.lang.Class<?> wildcardClass96 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABMC1_29.key2(byteArray48, (int) 'a');
        staticSaltsABMC1_21.key2(byteArray48, 100);
        byte[] byteArray55 = null;
        staticSaltsABMC1_21.key2(byteArray55, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_58.key2(byteArray68, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_58.key2(byteArray75, (-1));
        staticSaltsABMC1_21.key2(byteArray75, (int) (byte) 0);
        byte[] byteArray82 = null;
        staticSaltsABMC1_21.key2(byteArray82, (int) (byte) 100);
        byte[] byteArray85 = null;
        staticSaltsABMC1_21.key2(byteArray85, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_88 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticSaltsABMC1_88.key2(byteArray90, (int) '#');
        staticSaltsABMC1_21.key2(byteArray90, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray90, 1);
        java.lang.Class<?> wildcardClass97 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray25 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray25, (int) (byte) 100);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 0, (byte) -1, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray34, 10);
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) '#');
        java.lang.Class<?> wildcardClass40 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_16.key2(byteArray26, 0);
        staticSaltsABMC1_1.key2(byteArray26, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        staticSaltsABMC1_1.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray46, 10);
        staticSaltsABMC1_1.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray51 = new byte[] {};
        staticSaltsABMC1_1.key2(byteArray51, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_62.key2(byteArray72, 0);
        staticSaltsABMC1_54.key2(byteArray72, 100);
        staticSaltsABMC1_1.key2(byteArray72, 0);
        staticSaltsABMC1_0.key2(byteArray72, (-1));
        byte[] byteArray83 = null;
        staticSaltsABMC1_0.key2(byteArray83, (int) (short) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_16.key2(byteArray26, 0);
        staticSaltsABMC1_1.key2(byteArray26, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        staticSaltsABMC1_1.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray46, 10);
        staticSaltsABMC1_1.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray51 = new byte[] {};
        staticSaltsABMC1_1.key2(byteArray51, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_62.key2(byteArray72, 0);
        staticSaltsABMC1_54.key2(byteArray72, 100);
        staticSaltsABMC1_1.key2(byteArray72, 0);
        staticSaltsABMC1_0.key2(byteArray72, (-1));
        byte[] byteArray83 = null;
        staticSaltsABMC1_0.key2(byteArray83, 0);
        byte[] byteArray86 = null;
        staticSaltsABMC1_0.key2(byteArray86, 100);
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_17.key2(byteArray27, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_32.key2(byteArray42, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        staticSaltsABMC1_32.key2(byteArray57, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        staticSaltsABMC1_32.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray77, 10);
        staticSaltsABMC1_32.key2(byteArray77, (int) (byte) -1);
        staticSaltsABMC1_17.key2(byteArray77, 100);
        staticSaltsABMC1_0.key2(byteArray77, 0);
        java.lang.Class<?> wildcardClass86 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_0.key2(byteArray63, (int) '#');
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, (int) '4');
        byte[] byteArray73 = null;
        staticSaltsABMC1_0.key2(byteArray73, 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) 100);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_47.key2(byteArray58, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray58, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_71.key2(byteArray81, 0);
        staticSaltsABMC1_63.key2(byteArray81, 100);
        staticSaltsABMC1_33.key2(byteArray81, 1);
        staticSaltsABMC1_0.key2(byteArray81, (int) ' ');
        java.lang.Class<?> wildcardClass92 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray50, (int) 'a');
        staticSaltsABMC1_23.key2(byteArray50, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_62.key2(byteArray73, (int) (short) 10);
        staticSaltsABMC1_57.key2(byteArray73, (int) (byte) 0);
        staticSaltsABMC1_23.key2(byteArray73, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray73, (int) (byte) 1);
        java.lang.Class<?> wildcardClass82 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_40.key2(byteArray50, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_55.key2(byteArray65, 0);
        staticSaltsABMC1_40.key2(byteArray65, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        staticSaltsABMC1_40.key2(byteArray75, (int) (short) 0);
        staticSaltsABMC1_35.key2(byteArray75, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray87, (int) '#');
        staticSaltsABMC1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABMC1_35.key2(byteArray87, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray87, (int) (short) 1);
        byte[] byteArray96 = null;
        staticSaltsABMC1_0.key2(byteArray96, (int) '4');
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (-1));
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray70, 10);
        staticSaltsABMC1_62.key2(byteArray70, 10);
        staticSaltsABMC1_48.key2(byteArray70, (int) (short) 10);
        byte[] byteArray81 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_48.key2(byteArray81, (int) (short) 0);
        staticSaltsABMC1_40.key2(byteArray81, 0);
        staticSaltsABMC1_0.key2(byteArray81, (int) (short) 10);
        java.lang.Class<?> wildcardClass88 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_37.key2(byteArray54, (-1));
        staticSaltsABMC1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABMC1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 0);
        byte[] byteArray67 = null;
        staticSaltsABMC1_0.key2(byteArray67, 0);
        java.lang.Class<?> wildcardClass70 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_21.key2(byteArray39, 100);
        staticSaltsABMC1_0.key2(byteArray39, (int) (short) 0);
        byte[] byteArray48 = null;
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_51.key2(byteArray62, (int) (short) 10);
        byte[] byteArray65 = null;
        staticSaltsABMC1_51.key2(byteArray65, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_68.key2(byteArray78, 0);
        staticSaltsABMC1_51.key2(byteArray78, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray78, (int) (short) -1);
        java.lang.Class<?> wildcardClass87 = byteArray78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABMC1_29.key2(byteArray48, (int) 'a');
        staticSaltsABMC1_21.key2(byteArray48, 100);
        byte[] byteArray55 = null;
        staticSaltsABMC1_21.key2(byteArray55, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_58.key2(byteArray68, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_58.key2(byteArray75, (-1));
        staticSaltsABMC1_21.key2(byteArray75, (int) (byte) 0);
        byte[] byteArray82 = null;
        staticSaltsABMC1_21.key2(byteArray82, (int) (byte) 100);
        byte[] byteArray85 = null;
        staticSaltsABMC1_21.key2(byteArray85, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_88 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticSaltsABMC1_88.key2(byteArray90, (int) '#');
        staticSaltsABMC1_21.key2(byteArray90, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray90, 1);
        byte[] byteArray97 = null;
        staticSaltsABMC1_0.key2(byteArray97, (int) '4');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_35.key2(byteArray52, (-1));
        staticSaltsABMC1_0.key2(byteArray52, 10);
        java.lang.Class<?> wildcardClass59 = byteArray52.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_0.key2(byteArray15, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_18.key2(byteArray25, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_30.key2(byteArray42, (int) (short) 0);
        staticSaltsABMC1_18.key2(byteArray42, 0);
        staticSaltsABMC1_0.key2(byteArray42, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_51.key2(byteArray68, (-1));
        byte[] byteArray78 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_51.key2(byteArray78, 10);
        staticSaltsABMC1_0.key2(byteArray78, 0);
        java.lang.Class<?> wildcardClass83 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_5.key2(byteArray15, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_20.key2(byteArray30, 0);
        staticSaltsABMC1_5.key2(byteArray30, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_5.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray40, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        staticSaltsABMC1_49.key2(byteArray67, 100);
        byte[] byteArray80 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_49.key2(byteArray80, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray80, (int) (short) 100);
        byte[] byteArray85 = null;
        staticSaltsABMC1_0.key2(byteArray85, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_88 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_88.key2(byteArray91, 10);
        staticSaltsABMC1_0.key2(byteArray91, (int) (short) 0);
        java.lang.Class<?> wildcardClass96 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_17.key2(byteArray27, 0);
        staticSaltsABMC1_0.key2(byteArray27, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_34.key2(byteArray45, (int) (short) 10);
        byte[] byteArray48 = null;
        staticSaltsABMC1_34.key2(byteArray48, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        staticSaltsABMC1_34.key2(byteArray61, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_68.key2(byteArray74, (int) (short) 0);
        staticSaltsABMC1_34.key2(byteArray74, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray74, (int) (short) -1);
        java.lang.Class<?> wildcardClass81 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_14.key2(byteArray25, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_33.key2(byteArray43, 0);
        staticSaltsABMC1_32.key2(byteArray43, (int) (byte) 1);
        staticSaltsABMC1_14.key2(byteArray43, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray43, 100);
        java.lang.Class<?> wildcardClass54 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        byte[] byteArray17 = null;
        staticSaltsABMC1_0.key2(byteArray17, (int) (byte) -1);
        byte[] byteArray20 = null;
        staticSaltsABMC1_0.key2(byteArray20, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_24.key2(byteArray34, 0);
        staticSaltsABMC1_23.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_41.key2(byteArray52, (int) (byte) 1);
        staticSaltsABMC1_23.key2(byteArray52, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray52, 100);
        java.lang.Class<?> wildcardClass63 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_34.key2(byteArray50, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_57.key2(byteArray63, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray63, 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray35, (int) 'a');
        byte[] byteArray40 = null;
        staticSaltsABMC1_0.key2(byteArray40, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        staticSaltsABMC1_43.key2(byteArray61, 100);
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_43.key2(byteArray74, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray85, 10);
        staticSaltsABMC1_77.key2(byteArray85, 10);
        staticSaltsABMC1_43.key2(byteArray85, (int) '4');
        staticSaltsABMC1_0.key2(byteArray85, (int) '4');
        java.lang.Class<?> wildcardClass94 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_21.key2(byteArray39, 100);
        staticSaltsABMC1_0.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_56.key2(byteArray66, 0);
        staticSaltsABMC1_48.key2(byteArray66, 100);
        staticSaltsABMC1_0.key2(byteArray66, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_75.key2(byteArray78, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray78, (int) '4');
        byte[] byteArray85 = null;
        staticSaltsABMC1_0.key2(byteArray85, 100);
        byte[] byteArray88 = null;
        staticSaltsABMC1_0.key2(byteArray88, (int) (byte) 0);
        byte[] byteArray91 = null;
        staticSaltsABMC1_0.key2(byteArray91, (int) (short) 1);
        byte[] byteArray94 = null;
        staticSaltsABMC1_0.key2(byteArray94, (int) (byte) 1);
        byte[] byteArray97 = null;
        staticSaltsABMC1_0.key2(byteArray97, (int) (byte) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_0.key2(byteArray15, (int) (byte) 10);
        byte[] byteArray18 = null;
        staticSaltsABMC1_0.key2(byteArray18, 1);
        byte[] byteArray21 = null;
        staticSaltsABMC1_0.key2(byteArray21, (int) (short) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray20, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_44.key2(byteArray62, 100);
        staticSaltsABMC1_23.key2(byteArray62, (int) (short) 0);
        staticSaltsABMC1_17.key2(byteArray62, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray62, (int) (byte) 1);
        byte[] byteArray75 = null;
        staticSaltsABMC1_0.key2(byteArray75, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray86, 10);
        staticSaltsABMC1_78.key2(byteArray86, 10);
        staticSaltsABMC1_0.key2(byteArray86, (int) (short) 1);
        java.lang.Class<?> wildcardClass93 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, 1);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABMC1_19.key2(byteArray35, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray48, 10);
        staticSaltsABMC1_40.key2(byteArray48, 10);
        staticSaltsABMC1_19.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_55.key2(byteArray74, (int) 'a');
        staticSaltsABMC1_19.key2(byteArray74, (int) '4');
        staticSaltsABMC1_0.key2(byteArray74, (int) ' ');
        java.lang.Class<?> wildcardClass83 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (-1));
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_53.key2(byteArray64, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray64, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_69.key2(byteArray80, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray80, (int) 'a');
        staticSaltsABMC1_40.key2(byteArray80, 1);
        staticSaltsABMC1_0.key2(byteArray80, (int) (byte) 1);
        byte[] byteArray89 = null;
        staticSaltsABMC1_0.key2(byteArray89, (int) (byte) 1);
        java.lang.Class<?> wildcardClass92 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_12.key2(byteArray22, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_27.key2(byteArray37, 0);
        staticSaltsABMC1_12.key2(byteArray37, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        staticSaltsABMC1_12.key2(byteArray47, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray47, 10);
        byte[] byteArray56 = null;
        staticSaltsABMC1_0.key2(byteArray56, 1);
        byte[] byteArray59 = null;
        staticSaltsABMC1_0.key2(byteArray59, (int) (short) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray25 = null;
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        staticSaltsABMC1_28.key2(byteArray39, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        staticSaltsABMC1_46.key2(byteArray57, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_65.key2(byteArray75, 0);
        staticSaltsABMC1_64.key2(byteArray75, (int) (byte) 1);
        staticSaltsABMC1_46.key2(byteArray75, (int) (byte) 0);
        staticSaltsABMC1_28.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray89, 10);
        staticSaltsABMC1_28.key2(byteArray89, 1);
        staticSaltsABMC1_0.key2(byteArray89, (int) (byte) 0);
        java.lang.Class<?> wildcardClass96 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray57, (int) 'a');
        staticSaltsABMC1_30.key2(byteArray57, 100);
        staticSaltsABMC1_15.key2(byteArray57, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray57, 100);
        byte[] byteArray68 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray68, (-1));
        byte[] byteArray71 = null;
        staticSaltsABMC1_0.key2(byteArray71, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_87.key2(byteArray90, 10);
        staticSaltsABMC1_82.key2(byteArray90, 10);
        staticSaltsABMC1_74.key2(byteArray90, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray90, 100);
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) ' ');
        byte[] byteArray33 = null;
        staticSaltsABMC1_0.key2(byteArray33, (int) (byte) 100);
        java.lang.Class<?> wildcardClass36 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABMC1_0.key2(byteArray5, 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABMC1_12.key2(byteArray14, (int) '#');
        staticSaltsABMC1_11.key2(byteArray14, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_11.key2(byteArray21, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_11.key2(byteArray28, (-1));
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_11.key2(byteArray38, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_41.key2(byteArray59, 100);
        byte[] byteArray66 = new byte[] {};
        staticSaltsABMC1_41.key2(byteArray66, (int) (byte) 100);
        staticSaltsABMC1_11.key2(byteArray66, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray66, (int) ' ');
        java.lang.Class<?> wildcardClass73 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray26, 10);
        staticSaltsABMC1_18.key2(byteArray26, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray50, (int) 'a');
        staticSaltsABMC1_18.key2(byteArray50, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_18.key2(byteArray59, 0);
        staticSaltsABMC1_0.key2(byteArray59, (-1));
        byte[] byteArray66 = null;
        staticSaltsABMC1_0.key2(byteArray66, 1);
        byte[] byteArray69 = null;
        staticSaltsABMC1_0.key2(byteArray69, 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray35, (int) 'a');
        byte[] byteArray40 = null;
        staticSaltsABMC1_0.key2(byteArray40, (int) (short) 10);
        byte[] byteArray43 = null;
        staticSaltsABMC1_0.key2(byteArray43, 1);
        java.lang.Class<?> wildcardClass46 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_14.key2(byteArray24, 0);
        byte[] byteArray29 = null;
        staticSaltsABMC1_14.key2(byteArray29, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_32.key2(byteArray43, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABMC1_32.key2(byteArray57, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_70.key2(byteArray80, 0);
        staticSaltsABMC1_62.key2(byteArray80, 100);
        staticSaltsABMC1_32.key2(byteArray80, 1);
        staticSaltsABMC1_14.key2(byteArray80, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray80, (int) (byte) 100);
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABMC1_14.key2(byteArray39, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_14.key2(byteArray46, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_53.key2(byteArray60, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray60, 0);
        java.lang.Class<?> wildcardClass67 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray25 = null;
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_36.key2(byteArray47, (int) (short) 10);
        staticSaltsABMC1_28.key2(byteArray47, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_52.key2(byteArray63, (int) (short) 10);
        staticSaltsABMC1_28.key2(byteArray63, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_73.key2(byteArray84, (int) (short) 10);
        staticSaltsABMC1_68.key2(byteArray84, (int) (byte) 0);
        staticSaltsABMC1_28.key2(byteArray84, 0);
        staticSaltsABMC1_0.key2(byteArray84, (int) (short) 0);
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_16.key2(byteArray26, 0);
        staticSaltsABMC1_8.key2(byteArray26, 100);
        byte[] byteArray39 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_8.key2(byteArray39, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_42.key2(byteArray53, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABMC1_42.key2(byteArray67, (int) (short) -1);
        staticSaltsABMC1_8.key2(byteArray67, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray82, 10);
        staticSaltsABMC1_74.key2(byteArray82, 10);
        staticSaltsABMC1_8.key2(byteArray82, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray82, (int) (byte) 0);
        byte[] byteArray91 = null;
        staticSaltsABMC1_0.key2(byteArray91, (int) (short) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_55.key2(byteArray74, (int) 'a');
        staticSaltsABMC1_47.key2(byteArray74, 100);
        staticSaltsABMC1_0.key2(byteArray74, 0);
        byte[] byteArray83 = null;
        staticSaltsABMC1_0.key2(byteArray83, (int) (short) 100);
        byte[] byteArray86 = null;
        staticSaltsABMC1_0.key2(byteArray86, 100);
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray25 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray25, (int) (byte) 100);
        byte[] byteArray28 = null;
        staticSaltsABMC1_0.key2(byteArray28, (int) ' ');
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) 'a');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray52, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray65, 10);
        staticSaltsABMC1_57.key2(byteArray65, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_78.key2(byteArray89, (int) (short) 10);
        staticSaltsABMC1_70.key2(byteArray89, (int) 'a');
        staticSaltsABMC1_57.key2(byteArray89, 1);
        staticSaltsABMC1_33.key2(byteArray89, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray89, (int) '4');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_24.key2(byteArray34, 0);
        staticSaltsABMC1_23.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_41.key2(byteArray52, (int) (byte) 1);
        staticSaltsABMC1_23.key2(byteArray52, (int) (byte) 0);
        staticSaltsABMC1_18.key2(byteArray52, (-1));
        staticSaltsABMC1_0.key2(byteArray52, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray68, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_75.key2(byteArray78, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray78, 0);
        java.lang.Class<?> wildcardClass85 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_42.key2(byteArray53, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray53, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_0.key2(byteArray60, (int) 'a');
        java.lang.Class<?> wildcardClass65 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticSaltsABMC1_11.key2(byteArray13, (int) '#');
        staticSaltsABMC1_10.key2(byteArray13, (int) (short) 0);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_10.key2(byteArray21, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray21, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray21, (int) (short) 10);
        java.lang.Class<?> wildcardClass28 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        byte[] byteArray53 = null;
        staticSaltsABMC1_0.key2(byteArray53, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_56.key2(byteArray63, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray63, 0);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, (int) (short) 10);
        byte[] byteArray73 = null;
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 100);
        java.lang.Class<?> wildcardClass76 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_23.key2(byteArray33, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_23.key2(byteArray40, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray48, 10);
        staticSaltsABMC1_23.key2(byteArray48, (int) (short) 100);
        staticSaltsABMC1_0.key2(byteArray48, 0);
        java.lang.Class<?> wildcardClass55 = byteArray48.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        byte[] byteArray17 = null;
        staticSaltsABMC1_9.key2(byteArray17, (int) (short) 100);
        byte[] byteArray20 = null;
        staticSaltsABMC1_9.key2(byteArray20, (int) (short) 0);
        byte[] byteArray23 = null;
        staticSaltsABMC1_9.key2(byteArray23, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_27.key2(byteArray38, (int) (short) 10);
        staticSaltsABMC1_26.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray51, 10);
        staticSaltsABMC1_43.key2(byteArray51, 10);
        staticSaltsABMC1_26.key2(byteArray51, (int) '4');
        staticSaltsABMC1_9.key2(byteArray51, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray51, (int) '#');
        java.lang.Class<?> wildcardClass62 = byteArray51.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray56, (int) 'a');
        byte[] byteArray63 = null;
        staticSaltsABMC1_0.key2(byteArray63, 0);
        java.lang.Class<?> wildcardClass66 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_16.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_49.key2(byteArray60, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray60, (int) 'a');
        staticSaltsABMC1_16.key2(byteArray60, (-1));
        staticSaltsABMC1_0.key2(byteArray60, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_70.key2(byteArray80, 0);
        staticSaltsABMC1_69.key2(byteArray80, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray80, 0);
        java.lang.Class<?> wildcardClass89 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_38.key2(byteArray48, 0);
        staticSaltsABMC1_30.key2(byteArray48, 100);
        staticSaltsABMC1_0.key2(byteArray48, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_57.key2(byteArray74, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray82, 10);
        staticSaltsABMC1_57.key2(byteArray82, (int) (short) 100);
        staticSaltsABMC1_0.key2(byteArray82, (int) '#');
        java.lang.Class<?> wildcardClass89 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_37.key2(byteArray48, 1);
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_57.key2(byteArray64, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 0);
        byte[] byteArray71 = null;
        staticSaltsABMC1_0.key2(byteArray71, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_82.key2(byteArray85, (int) (short) 0);
        staticSaltsABMC1_74.key2(byteArray85, 1);
        staticSaltsABMC1_0.key2(byteArray85, (int) (short) 100);
        java.lang.Class<?> wildcardClass94 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_42.key2(byteArray53, (int) (short) 10);
        staticSaltsABMC1_37.key2(byteArray53, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_58.key2(byteArray68, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_58.key2(byteArray75, (-1));
        staticSaltsABMC1_37.key2(byteArray75, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray75, (-1));
        java.lang.Class<?> wildcardClass84 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_0.key2(byteArray15, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_18.key2(byteArray21, (int) (short) 0);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_18.key2(byteArray29, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_32.key2(byteArray43, (int) (short) 10);
        staticSaltsABMC1_18.key2(byteArray43, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_56.key2(byteArray66, 0);
        staticSaltsABMC1_48.key2(byteArray66, 100);
        staticSaltsABMC1_18.key2(byteArray66, 1);
        staticSaltsABMC1_0.key2(byteArray66, (int) (byte) 100);
        byte[] byteArray77 = null;
        staticSaltsABMC1_0.key2(byteArray77, (-1));
        java.lang.Class<?> wildcardClass80 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_22.key2(byteArray32, 0);
        staticSaltsABMC1_14.key2(byteArray32, 100);
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_14.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_48.key2(byteArray55, (int) (byte) 10);
        staticSaltsABMC1_14.key2(byteArray55, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_62.key2(byteArray72, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray87, (int) '#');
        staticSaltsABMC1_77.key2(byteArray87, 0);
        staticSaltsABMC1_62.key2(byteArray87, (int) 'a');
        staticSaltsABMC1_14.key2(byteArray87, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray87, 0);
        java.lang.Class<?> wildcardClass98 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) 100);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_47.key2(byteArray58, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray58, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_71.key2(byteArray81, 0);
        staticSaltsABMC1_63.key2(byteArray81, 100);
        staticSaltsABMC1_33.key2(byteArray81, 1);
        staticSaltsABMC1_0.key2(byteArray81, (int) ' ');
        java.lang.Class<?> wildcardClass92 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_8.key2(byteArray15, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_28.key2(byteArray38, 0);
        staticSaltsABMC1_20.key2(byteArray38, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_45.key2(byteArray55, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_60.key2(byteArray70, 0);
        staticSaltsABMC1_45.key2(byteArray70, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        staticSaltsABMC1_45.key2(byteArray80, (int) (short) 0);
        staticSaltsABMC1_20.key2(byteArray80, (int) '4');
        staticSaltsABMC1_8.key2(byteArray80, (int) '#');
        staticSaltsABMC1_0.key2(byteArray80, (-1));
        byte[] byteArray93 = null;
        staticSaltsABMC1_0.key2(byteArray93, (int) (short) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray27, 10);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        staticSaltsABMC1_33.key2(byteArray44, 1);
        staticSaltsABMC1_0.key2(byteArray44, (-1));
        byte[] byteArray53 = null;
        staticSaltsABMC1_0.key2(byteArray53, (int) ' ');
        java.lang.Class<?> wildcardClass56 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        staticSaltsABMC1_17.key2(byteArray25, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_38.key2(byteArray49, (int) (short) 10);
        staticSaltsABMC1_30.key2(byteArray49, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray49, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_17.key2(byteArray58, 0);
        staticSaltsABMC1_0.key2(byteArray58, (int) '#');
        byte[] byteArray65 = null;
        staticSaltsABMC1_0.key2(byteArray65, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        staticSaltsABMC1_68.key2(byteArray79, 1);
        staticSaltsABMC1_0.key2(byteArray79, 0);
        java.lang.Class<?> wildcardClass88 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        staticSaltsABMC1_15.key2(byteArray42, 100);
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 10);
        byte[] byteArray51 = null;
        staticSaltsABMC1_0.key2(byteArray51, 100);
        byte[] byteArray54 = null;
        staticSaltsABMC1_0.key2(byteArray54, 0);
        byte[] byteArray57 = null;
        staticSaltsABMC1_0.key2(byteArray57, 10);
        java.lang.Class<?> wildcardClass60 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        staticSaltsABMC1_21.key2(byteArray29, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_42.key2(byteArray53, (int) (short) 10);
        staticSaltsABMC1_34.key2(byteArray53, (int) 'a');
        staticSaltsABMC1_21.key2(byteArray53, 1);
        staticSaltsABMC1_0.key2(byteArray53, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_62.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray87, 10);
        staticSaltsABMC1_79.key2(byteArray87, 10);
        staticSaltsABMC1_62.key2(byteArray87, (int) '4');
        staticSaltsABMC1_0.key2(byteArray87, (int) ' ');
        java.lang.Class<?> wildcardClass96 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_23.key2(byteArray34, (int) (short) 10);
        staticSaltsABMC1_18.key2(byteArray34, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_40.key2(byteArray50, 0);
        staticSaltsABMC1_39.key2(byteArray50, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_58.key2(byteArray68, 0);
        staticSaltsABMC1_57.key2(byteArray68, (int) (byte) 1);
        staticSaltsABMC1_39.key2(byteArray68, (int) (byte) 0);
        staticSaltsABMC1_18.key2(byteArray68, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray68, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray84, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticSaltsABMC1_87.key2(byteArray89, (int) '#');
        staticSaltsABMC1_81.key2(byteArray89, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray89, (int) (short) -1);
        byte[] byteArray96 = null;
        staticSaltsABMC1_0.key2(byteArray96, (int) '4');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_0.key2(byteArray15, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_18.key2(byteArray21, (int) (short) 0);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_18.key2(byteArray29, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_32.key2(byteArray43, (int) (short) 10);
        staticSaltsABMC1_18.key2(byteArray43, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_48.key2(byteArray58, 0);
        staticSaltsABMC1_18.key2(byteArray58, 0);
        byte[] byteArray65 = null;
        staticSaltsABMC1_18.key2(byteArray65, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray84, 10);
        staticSaltsABMC1_76.key2(byteArray84, 10);
        staticSaltsABMC1_68.key2(byteArray84, (int) (short) 1);
        staticSaltsABMC1_18.key2(byteArray84, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray84, 100);
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray22, 10);
        staticSaltsABMC1_14.key2(byteArray22, 10);
        staticSaltsABMC1_0.key2(byteArray22, (int) (short) 10);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        byte[] byteArray44 = null;
        staticSaltsABMC1_36.key2(byteArray44, (int) (short) 100);
        byte[] byteArray47 = null;
        staticSaltsABMC1_36.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray66, 10);
        staticSaltsABMC1_58.key2(byteArray66, 10);
        staticSaltsABMC1_50.key2(byteArray66, (int) (short) 1);
        staticSaltsABMC1_36.key2(byteArray66, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray66, (int) (short) -1);
        byte[] byteArray77 = null;
        staticSaltsABMC1_0.key2(byteArray77, (int) '#');
        java.lang.Class<?> wildcardClass80 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABMC1_0.key2(byteArray5, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_9.key2(byteArray20, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray33, 10);
        staticSaltsABMC1_25.key2(byteArray33, 10);
        staticSaltsABMC1_8.key2(byteArray33, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_41.key2(byteArray51, 0);
        staticSaltsABMC1_40.key2(byteArray51, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_59.key2(byteArray69, 0);
        staticSaltsABMC1_58.key2(byteArray69, (int) (byte) 1);
        staticSaltsABMC1_40.key2(byteArray69, (int) (byte) 0);
        staticSaltsABMC1_8.key2(byteArray69, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray83, 10);
        staticSaltsABMC1_8.key2(byteArray83, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray83, (int) ' ');
        java.lang.Class<?> wildcardClass90 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray25 = null;
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_36.key2(byteArray47, (int) (short) 10);
        staticSaltsABMC1_28.key2(byteArray47, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_52.key2(byteArray63, (int) (short) 10);
        staticSaltsABMC1_28.key2(byteArray63, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_73.key2(byteArray84, (int) (short) 10);
        staticSaltsABMC1_68.key2(byteArray84, (int) (byte) 0);
        staticSaltsABMC1_28.key2(byteArray84, 0);
        staticSaltsABMC1_0.key2(byteArray84, (int) (short) 0);
        java.lang.Class<?> wildcardClass93 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_37.key2(byteArray48, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_56.key2(byteArray66, 0);
        staticSaltsABMC1_55.key2(byteArray66, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_74.key2(byteArray84, 0);
        staticSaltsABMC1_73.key2(byteArray84, (int) (byte) 1);
        staticSaltsABMC1_55.key2(byteArray84, (int) (byte) 0);
        staticSaltsABMC1_37.key2(byteArray84, (int) '#');
        staticSaltsABMC1_0.key2(byteArray84, (int) (byte) 0);
        java.lang.Class<?> wildcardClass97 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray20, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_44.key2(byteArray62, 100);
        staticSaltsABMC1_23.key2(byteArray62, (int) (short) 0);
        staticSaltsABMC1_17.key2(byteArray62, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray62, (int) (byte) 1);
        byte[] byteArray75 = null;
        staticSaltsABMC1_0.key2(byteArray75, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray86, 10);
        staticSaltsABMC1_78.key2(byteArray86, 10);
        staticSaltsABMC1_0.key2(byteArray86, (int) (short) 1);
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_15.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        staticSaltsABMC1_15.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray60, 10);
        staticSaltsABMC1_15.key2(byteArray60, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray60, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_67.key2(byteArray73, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 1);
        byte[] byteArray78 = null;
        staticSaltsABMC1_0.key2(byteArray78, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray83, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_81.key2(byteArray88, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray88, (int) (byte) 100);
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_28.key2(byteArray44, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        staticSaltsABMC1_49.key2(byteArray67, 100);
        staticSaltsABMC1_28.key2(byteArray67, (int) (short) 0);
        staticSaltsABMC1_22.key2(byteArray67, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray67, (int) '#');
        byte[] byteArray80 = null;
        staticSaltsABMC1_0.key2(byteArray80, (int) (short) 0);
        java.lang.Class<?> wildcardClass83 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_38.key2(byteArray48, 0);
        staticSaltsABMC1_30.key2(byteArray48, 100);
        staticSaltsABMC1_0.key2(byteArray48, 1);
        byte[] byteArray57 = null;
        staticSaltsABMC1_0.key2(byteArray57, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_60.key2(byteArray71, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_74.key2(byteArray85, (int) (short) 10);
        staticSaltsABMC1_60.key2(byteArray85, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_90 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray92 = new byte[] { (byte) 100 };
        staticSaltsABMC1_90.key2(byteArray92, (int) '#');
        staticSaltsABMC1_60.key2(byteArray92, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray92, (int) (short) 0);
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_34.key2(byteArray44, 0);
        byte[] byteArray49 = null;
        staticSaltsABMC1_34.key2(byteArray49, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_52.key2(byteArray59, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_65.key2(byteArray76, (int) (short) 10);
        staticSaltsABMC1_64.key2(byteArray76, (int) (short) 0);
        staticSaltsABMC1_52.key2(byteArray76, 0);
        staticSaltsABMC1_34.key2(byteArray76, (int) '4');
        staticSaltsABMC1_0.key2(byteArray76, (int) (short) 1);
        java.lang.Class<?> wildcardClass87 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABMC1_0.key2(byteArray38, 100);
        byte[] byteArray41 = null;
        staticSaltsABMC1_0.key2(byteArray41, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_44.key2(byteArray54, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_44.key2(byteArray61, (-1));
        staticSaltsABMC1_0.key2(byteArray61, (int) ' ');
        java.lang.Class<?> wildcardClass68 = byteArray61.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_37.key2(byteArray44, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_49.key2(byteArray61, (int) (short) 0);
        staticSaltsABMC1_37.key2(byteArray61, 0);
        staticSaltsABMC1_0.key2(byteArray61, (int) (byte) 1);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, (int) (short) 0);
        byte[] byteArray73 = null;
        staticSaltsABMC1_0.key2(byteArray73, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_0.key2(byteArray78, (int) '#');
        java.lang.Class<?> wildcardClass83 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        byte[] byteArray17 = null;
        staticSaltsABMC1_0.key2(byteArray17, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_25.key2(byteArray36, (int) (short) 10);
        staticSaltsABMC1_20.key2(byteArray36, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_41.key2(byteArray59, 100);
        staticSaltsABMC1_20.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_68.key2(byteArray78, 0);
        staticSaltsABMC1_20.key2(byteArray78, (int) '#');
        byte[] byteArray86 = new byte[] { (byte) 10 };
        staticSaltsABMC1_20.key2(byteArray86, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray86, (-1));
        java.lang.Class<?> wildcardClass91 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray59, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_65.key2(byteArray75, 0);
        staticSaltsABMC1_64.key2(byteArray75, (int) (byte) 1);
        staticSaltsABMC1_40.key2(byteArray75, 1);
        staticSaltsABMC1_0.key2(byteArray75, (int) (short) 1);
        byte[] byteArray86 = null;
        staticSaltsABMC1_0.key2(byteArray86, 10);
        byte[] byteArray89 = null;
        staticSaltsABMC1_0.key2(byteArray89, 1);
        byte[] byteArray92 = null;
        staticSaltsABMC1_0.key2(byteArray92, 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_48.key2(byteArray58, 0);
        staticSaltsABMC1_0.key2(byteArray58, 0);
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 1, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray68, (int) (short) 0);
        java.lang.Class<?> wildcardClass71 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_43.key2(byteArray53, 0);
        staticSaltsABMC1_42.key2(byteArray53, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_61.key2(byteArray71, 0);
        staticSaltsABMC1_60.key2(byteArray71, (int) (byte) 1);
        staticSaltsABMC1_42.key2(byteArray71, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray71, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticSaltsABMC1_87.key2(byteArray89, (int) '#');
        staticSaltsABMC1_82.key2(byteArray89, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray89, (int) (short) 0);
        byte[] byteArray96 = null;
        staticSaltsABMC1_0.key2(byteArray96, (int) (short) 10);
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        byte[] byteArray17 = null;
        staticSaltsABMC1_9.key2(byteArray17, (int) (short) 100);
        byte[] byteArray20 = null;
        staticSaltsABMC1_9.key2(byteArray20, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_47.key2(byteArray58, (int) (short) 10);
        byte[] byteArray61 = null;
        staticSaltsABMC1_47.key2(byteArray61, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_64.key2(byteArray74, 0);
        staticSaltsABMC1_47.key2(byteArray74, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_81.key2(byteArray87, (int) (short) 0);
        staticSaltsABMC1_47.key2(byteArray87, (int) (short) 1);
        staticSaltsABMC1_23.key2(byteArray87, (int) (byte) 10);
        staticSaltsABMC1_9.key2(byteArray87, 1);
        staticSaltsABMC1_0.key2(byteArray87, (int) (byte) -1);
        java.lang.Class<?> wildcardClass98 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        staticSaltsABMC1_17.key2(byteArray25, 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_33.key2(byteArray43, 0);
        staticSaltsABMC1_32.key2(byteArray43, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        staticSaltsABMC1_50.key2(byteArray61, (int) (byte) 1);
        staticSaltsABMC1_32.key2(byteArray61, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray61, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray75, 10);
        staticSaltsABMC1_0.key2(byteArray75, (int) 'a');
        java.lang.Class<?> wildcardClass80 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_18.key2(byteArray28, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_33.key2(byteArray43, 0);
        staticSaltsABMC1_18.key2(byteArray43, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        staticSaltsABMC1_18.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray63, 10);
        staticSaltsABMC1_18.key2(byteArray63, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray63, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_78.key2(byteArray88, 0);
        staticSaltsABMC1_70.key2(byteArray88, 100);
        staticSaltsABMC1_0.key2(byteArray88, (int) (short) 1);
        byte[] byteArray97 = null;
        staticSaltsABMC1_0.key2(byteArray97, (int) (short) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_38.key2(byteArray49, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray49, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray62, 10);
        staticSaltsABMC1_54.key2(byteArray62, 10);
        staticSaltsABMC1_33.key2(byteArray62, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray62, (int) (short) 0);
        java.lang.Class<?> wildcardClass71 = byteArray62.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_61.key2(byteArray72, (int) (short) 10);
        staticSaltsABMC1_53.key2(byteArray72, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray72, 10);
        java.lang.Class<?> wildcardClass79 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray22, 10);
        staticSaltsABMC1_14.key2(byteArray22, 10);
        staticSaltsABMC1_0.key2(byteArray22, (int) (short) 10);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_44.key2(byteArray55, (int) (short) 10);
        staticSaltsABMC1_36.key2(byteArray55, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_60.key2(byteArray71, (int) (short) 10);
        staticSaltsABMC1_36.key2(byteArray71, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray71, (int) ' ');
        java.lang.Class<?> wildcardClass78 = byteArray71.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_20.key2(byteArray31, (int) (short) 10);
        staticSaltsABMC1_19.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_36.key2(byteArray47, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_36.key2(byteArray61, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_66.key2(byteArray76, 0);
        staticSaltsABMC1_36.key2(byteArray76, 0);
        staticSaltsABMC1_19.key2(byteArray76, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray76, (int) (byte) 100);
        java.lang.Class<?> wildcardClass87 = byteArray76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray25 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray25, (int) (byte) 100);
        byte[] byteArray28 = null;
        staticSaltsABMC1_0.key2(byteArray28, (int) ' ');
        java.lang.Class<?> wildcardClass31 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_57.key2(byteArray68, (int) (short) 10);
        staticSaltsABMC1_52.key2(byteArray68, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray81, 10);
        staticSaltsABMC1_73.key2(byteArray81, 10);
        staticSaltsABMC1_52.key2(byteArray81, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray81, (int) (byte) -1);
        byte[] byteArray90 = null;
        staticSaltsABMC1_0.key2(byteArray90, (int) 'a');
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABMC1_12.key2(byteArray14, (int) '#');
        staticSaltsABMC1_11.key2(byteArray14, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_11.key2(byteArray21, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_26.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_26.key2(byteArray36, 0);
        staticSaltsABMC1_11.key2(byteArray36, (int) 'a');
        byte[] byteArray43 = null;
        staticSaltsABMC1_11.key2(byteArray43, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_51.key2(byteArray62, (int) (short) 10);
        staticSaltsABMC1_46.key2(byteArray62, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray70, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_67.key2(byteArray75, (int) (short) 1);
        staticSaltsABMC1_46.key2(byteArray75, (int) (short) 10);
        staticSaltsABMC1_11.key2(byteArray75, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray75, (int) (short) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_9.key2(byteArray19, 0);
        staticSaltsABMC1_8.key2(byteArray19, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray19, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_36.key2(byteArray46, 0);
        staticSaltsABMC1_28.key2(byteArray46, 100);
        byte[] byteArray59 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_28.key2(byteArray59, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_62.key2(byteArray69, (int) (byte) 10);
        staticSaltsABMC1_28.key2(byteArray69, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_76.key2(byteArray86, 0);
        staticSaltsABMC1_28.key2(byteArray86, 0);
        staticSaltsABMC1_0.key2(byteArray86, (int) (byte) -1);
        byte[] byteArray95 = null;
        staticSaltsABMC1_0.key2(byteArray95, 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_45.key2(byteArray63, 100);
        staticSaltsABMC1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray63, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_82.key2(byteArray85, (int) (short) 0);
        staticSaltsABMC1_74.key2(byteArray85, 1);
        staticSaltsABMC1_0.key2(byteArray85, (int) (short) 10);
        byte[] byteArray94 = null;
        staticSaltsABMC1_0.key2(byteArray94, (int) (byte) 0);
        byte[] byteArray97 = null;
        staticSaltsABMC1_0.key2(byteArray97, 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray56, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_61.key2(byteArray71, 0);
        staticSaltsABMC1_31.key2(byteArray71, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray81, 10);
        staticSaltsABMC1_31.key2(byteArray81, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray81, 0);
        java.lang.Class<?> wildcardClass88 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_21.key2(byteArray39, 100);
        staticSaltsABMC1_0.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_56.key2(byteArray66, 0);
        staticSaltsABMC1_48.key2(byteArray66, 100);
        staticSaltsABMC1_0.key2(byteArray66, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_76.key2(byteArray86, 0);
        staticSaltsABMC1_75.key2(byteArray86, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray86, (int) (byte) 100);
        byte[] byteArray95 = null;
        staticSaltsABMC1_0.key2(byteArray95, (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_8.key2(byteArray15, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray15, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_22.key2(byteArray29, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        staticSaltsABMC1_34.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_52.key2(byteArray63, (int) (byte) 1);
        staticSaltsABMC1_34.key2(byteArray63, (int) (byte) 0);
        staticSaltsABMC1_22.key2(byteArray63, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray63, (int) ' ');
        byte[] byteArray76 = null;
        staticSaltsABMC1_0.key2(byteArray76, (int) (byte) -1);
        java.lang.Class<?> wildcardClass79 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_36.key2(byteArray46, 0);
        staticSaltsABMC1_35.key2(byteArray46, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_54.key2(byteArray64, 0);
        staticSaltsABMC1_53.key2(byteArray64, (int) (byte) 1);
        staticSaltsABMC1_35.key2(byteArray64, (int) (byte) 0);
        staticSaltsABMC1_30.key2(byteArray64, (-1));
        staticSaltsABMC1_0.key2(byteArray64, (int) (short) 10);
        java.lang.Class<?> wildcardClass77 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_25.key2(byteArray35, 0);
        staticSaltsABMC1_17.key2(byteArray35, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        staticSaltsABMC1_42.key2(byteArray67, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        staticSaltsABMC1_42.key2(byteArray77, (int) (short) 0);
        staticSaltsABMC1_17.key2(byteArray77, (int) '4');
        staticSaltsABMC1_0.key2(byteArray77, (int) (short) 100);
        byte[] byteArray88 = null;
        staticSaltsABMC1_0.key2(byteArray88, (int) (byte) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_34.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_34.key2(byteArray51, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray59, 10);
        staticSaltsABMC1_34.key2(byteArray59, (int) (short) 100);
        staticSaltsABMC1_0.key2(byteArray59, (int) (byte) 0);
        byte[] byteArray66 = null;
        staticSaltsABMC1_0.key2(byteArray66, (int) (byte) 0);
        java.lang.Class<?> wildcardClass69 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_21.key2(byteArray38, (-1));
        staticSaltsABMC1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray61, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray74, 10);
        staticSaltsABMC1_66.key2(byteArray74, 10);
        staticSaltsABMC1_45.key2(byteArray74, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray74, (int) (byte) 0);
        byte[] byteArray83 = null;
        staticSaltsABMC1_0.key2(byteArray83, 100);
        java.lang.Class<?> wildcardClass86 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        byte[] byteArray21 = null;
        staticSaltsABMC1_0.key2(byteArray21, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray46, 10);
        staticSaltsABMC1_38.key2(byteArray46, 10);
        staticSaltsABMC1_24.key2(byteArray46, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray46, (-1));
        java.lang.Class<?> wildcardClass55 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        staticSaltsABMC1_17.key2(byteArray25, 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_32.key2(byteArray42, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        staticSaltsABMC1_32.key2(byteArray57, (int) 'a');
        byte[] byteArray64 = null;
        staticSaltsABMC1_32.key2(byteArray64, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_67.key2(byteArray77, 0);
        staticSaltsABMC1_32.key2(byteArray77, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray77, (int) (short) 0);
        java.lang.Class<?> wildcardClass86 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray30, 10);
        staticSaltsABMC1_22.key2(byteArray30, 10);
        staticSaltsABMC1_14.key2(byteArray30, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray30, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_39.key2(byteArray49, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_54.key2(byteArray64, 0);
        staticSaltsABMC1_39.key2(byteArray64, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray64, 0);
        byte[] byteArray73 = null;
        staticSaltsABMC1_0.key2(byteArray73, (int) (byte) 100);
        byte[] byteArray76 = null;
        staticSaltsABMC1_0.key2(byteArray76, (int) '4');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        staticSaltsABMC1_15.key2(byteArray42, 100);
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_51.key2(byteArray62, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray62, (int) (byte) 100);
        java.lang.Class<?> wildcardClass71 = byteArray62.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABMC1_0.key2(byteArray5, 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABMC1_12.key2(byteArray14, (int) '#');
        staticSaltsABMC1_11.key2(byteArray14, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_11.key2(byteArray21, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_11.key2(byteArray28, (-1));
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_11.key2(byteArray38, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_41.key2(byteArray59, 100);
        byte[] byteArray66 = new byte[] {};
        staticSaltsABMC1_41.key2(byteArray66, (int) (byte) 100);
        staticSaltsABMC1_11.key2(byteArray66, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray66, (int) ' ');
        java.lang.Class<?> wildcardClass73 = byteArray66.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_17.key2(byteArray28, (int) (short) 10);
        byte[] byteArray31 = null;
        staticSaltsABMC1_17.key2(byteArray31, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray42, 10);
        staticSaltsABMC1_34.key2(byteArray42, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_55.key2(byteArray66, (int) (short) 10);
        staticSaltsABMC1_47.key2(byteArray66, (int) 'a');
        staticSaltsABMC1_34.key2(byteArray66, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_34.key2(byteArray75, 0);
        staticSaltsABMC1_17.key2(byteArray75, (int) '#');
        staticSaltsABMC1_0.key2(byteArray75, (-1));
        byte[] byteArray84 = null;
        staticSaltsABMC1_0.key2(byteArray84, (int) (byte) -1);
        java.lang.Class<?> wildcardClass87 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_25.key2(byteArray35, 0);
        staticSaltsABMC1_24.key2(byteArray35, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray35, 1);
        byte[] byteArray44 = null;
        staticSaltsABMC1_0.key2(byteArray44, (int) (short) -1);
        java.lang.Class<?> wildcardClass47 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABMC1_0.key2(byteArray5, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABMC1_16.key2(byteArray35, (int) 'a');
        staticSaltsABMC1_8.key2(byteArray35, 100);
        byte[] byteArray42 = null;
        staticSaltsABMC1_8.key2(byteArray42, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_45.key2(byteArray52, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_58.key2(byteArray69, (int) (short) 10);
        staticSaltsABMC1_57.key2(byteArray69, (int) (short) 0);
        staticSaltsABMC1_45.key2(byteArray69, 0);
        staticSaltsABMC1_8.key2(byteArray69, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray69, (int) (short) 100);
        byte[] byteArray80 = null;
        staticSaltsABMC1_0.key2(byteArray80, (int) (short) 10);
        java.lang.Class<?> wildcardClass83 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (-1));
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (short) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_16.key2(byteArray26, 0);
        staticSaltsABMC1_1.key2(byteArray26, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        staticSaltsABMC1_1.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray46, 10);
        staticSaltsABMC1_1.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray51 = new byte[] {};
        staticSaltsABMC1_1.key2(byteArray51, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_62.key2(byteArray72, 0);
        staticSaltsABMC1_54.key2(byteArray72, 100);
        staticSaltsABMC1_1.key2(byteArray72, 0);
        staticSaltsABMC1_0.key2(byteArray72, (-1));
        byte[] byteArray83 = null;
        staticSaltsABMC1_0.key2(byteArray83, (int) (byte) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_45.key2(byteArray63, 100);
        staticSaltsABMC1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray63, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray77, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray87, (int) '#');
        staticSaltsABMC1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray87, (-1));
        byte[] byteArray94 = null;
        staticSaltsABMC1_0.key2(byteArray94, 1);
        java.lang.Class<?> wildcardClass97 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_42.key2(byteArray53, (int) (short) 10);
        staticSaltsABMC1_37.key2(byteArray53, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray66, 10);
        staticSaltsABMC1_58.key2(byteArray66, 10);
        staticSaltsABMC1_37.key2(byteArray66, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray66, (int) 'a');
        byte[] byteArray75 = null;
        staticSaltsABMC1_0.key2(byteArray75, (int) (short) 0);
        byte[] byteArray78 = null;
        staticSaltsABMC1_0.key2(byteArray78, (int) (short) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        staticSaltsABMC1_15.key2(byteArray42, 100);
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 10);
        byte[] byteArray51 = null;
        staticSaltsABMC1_0.key2(byteArray51, (int) (short) 10);
        java.lang.Class<?> wildcardClass54 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_22.key2(byteArray32, 0);
        staticSaltsABMC1_21.key2(byteArray32, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_40.key2(byteArray50, 0);
        staticSaltsABMC1_39.key2(byteArray50, (int) (byte) 1);
        staticSaltsABMC1_21.key2(byteArray50, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) 1);
        byte[] byteArray61 = null;
        staticSaltsABMC1_0.key2(byteArray61, (int) ' ');
        byte[] byteArray64 = null;
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 1);
        java.lang.Class<?> wildcardClass67 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        staticSaltsABMC1_15.key2(byteArray42, 100);
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_51.key2(byteArray62, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray62, (int) (byte) 100);
        java.lang.Class<?> wildcardClass71 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray25 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray25, (int) (byte) 100);
        byte[] byteArray28 = null;
        staticSaltsABMC1_0.key2(byteArray28, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_36.key2(byteArray47, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray47, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray60, 10);
        staticSaltsABMC1_52.key2(byteArray60, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_73.key2(byteArray84, (int) (short) 10);
        staticSaltsABMC1_65.key2(byteArray84, (int) 'a');
        staticSaltsABMC1_52.key2(byteArray84, 1);
        staticSaltsABMC1_31.key2(byteArray84, 100);
        staticSaltsABMC1_0.key2(byteArray84, (int) (short) 100);
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        byte[] byteArray47 = null;
        staticSaltsABMC1_33.key2(byteArray47, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray58, 10);
        staticSaltsABMC1_50.key2(byteArray58, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_71.key2(byteArray82, (int) (short) 10);
        staticSaltsABMC1_63.key2(byteArray82, (int) 'a');
        staticSaltsABMC1_50.key2(byteArray82, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_89 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticSaltsABMC1_89.key2(byteArray91, (int) '#');
        staticSaltsABMC1_50.key2(byteArray91, 0);
        staticSaltsABMC1_33.key2(byteArray91, (int) '#');
        staticSaltsABMC1_0.key2(byteArray91, (int) '4');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_17.key2(byteArray28, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray28, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray44, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_59.key2(byteArray70, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray81, 10);
        staticSaltsABMC1_73.key2(byteArray81, 10);
        staticSaltsABMC1_59.key2(byteArray81, (int) (short) 10);
        byte[] byteArray92 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_59.key2(byteArray92, (int) (short) 0);
        staticSaltsABMC1_51.key2(byteArray92, 0);
        staticSaltsABMC1_0.key2(byteArray92, (int) (short) 1);
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_45.key2(byteArray63, 100);
        staticSaltsABMC1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray63, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_82.key2(byteArray85, (int) (short) 0);
        staticSaltsABMC1_74.key2(byteArray85, 1);
        staticSaltsABMC1_0.key2(byteArray85, (int) (short) 10);
        byte[] byteArray94 = null;
        staticSaltsABMC1_0.key2(byteArray94, (int) ' ');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        staticSaltsABMC1_36.key2(byteArray47, (int) (byte) 1);
        staticSaltsABMC1_18.key2(byteArray47, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray61, 10);
        staticSaltsABMC1_0.key2(byteArray61, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_66.key2(byteArray77, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray77, 100);
        java.lang.Class<?> wildcardClass82 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABMC1_7.key2(byteArray9, (int) '#');
        staticSaltsABMC1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_6.key2(byteArray16, 0);
        staticSaltsABMC1_5.key2(byteArray16, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_23.key2(byteArray33, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_38.key2(byteArray48, 0);
        staticSaltsABMC1_23.key2(byteArray48, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        staticSaltsABMC1_23.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray68, 10);
        staticSaltsABMC1_23.key2(byteArray68, (int) (byte) -1);
        staticSaltsABMC1_5.key2(byteArray68, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray68, (int) (byte) -1);
        byte[] byteArray77 = null;
        staticSaltsABMC1_0.key2(byteArray77, (int) (short) 10);
        java.lang.Class<?> wildcardClass80 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_13.key2(byteArray23, 0);
        staticSaltsABMC1_12.key2(byteArray23, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_31.key2(byteArray41, 0);
        staticSaltsABMC1_30.key2(byteArray41, (int) (byte) 1);
        staticSaltsABMC1_12.key2(byteArray41, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray41, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_52.key2(byteArray59, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_65.key2(byteArray76, (int) (short) 10);
        staticSaltsABMC1_64.key2(byteArray76, (int) (short) 0);
        staticSaltsABMC1_52.key2(byteArray76, 0);
        staticSaltsABMC1_0.key2(byteArray76, (int) (byte) 10);
        java.lang.Class<?> wildcardClass85 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray57, (int) 'a');
        staticSaltsABMC1_30.key2(byteArray57, 100);
        staticSaltsABMC1_15.key2(byteArray57, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray57, 100);
        byte[] byteArray68 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray68, (-1));
        byte[] byteArray71 = null;
        staticSaltsABMC1_0.key2(byteArray71, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_87.key2(byteArray90, 10);
        staticSaltsABMC1_82.key2(byteArray90, 10);
        staticSaltsABMC1_74.key2(byteArray90, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray90, 100);
        java.lang.Class<?> wildcardClass99 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABMC1_29.key2(byteArray48, (int) 'a');
        staticSaltsABMC1_21.key2(byteArray48, 100);
        byte[] byteArray55 = null;
        staticSaltsABMC1_21.key2(byteArray55, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_58.key2(byteArray68, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_58.key2(byteArray75, (-1));
        staticSaltsABMC1_21.key2(byteArray75, (int) (byte) 0);
        byte[] byteArray82 = null;
        staticSaltsABMC1_21.key2(byteArray82, (int) (byte) 100);
        byte[] byteArray85 = null;
        staticSaltsABMC1_21.key2(byteArray85, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_88 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticSaltsABMC1_88.key2(byteArray90, (int) '#');
        staticSaltsABMC1_21.key2(byteArray90, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray90, 1);
        byte[] byteArray97 = null;
        staticSaltsABMC1_0.key2(byteArray97, 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 10);
        byte[] byteArray19 = null;
        staticSaltsABMC1_0.key2(byteArray19, (int) (byte) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, (int) (byte) 1);
        byte[] byteArray55 = null;
        staticSaltsABMC1_0.key2(byteArray55, (int) (short) 0);
        java.lang.Class<?> wildcardClass58 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_14.key2(byteArray25, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_33.key2(byteArray43, 0);
        staticSaltsABMC1_32.key2(byteArray43, (int) (byte) 1);
        staticSaltsABMC1_14.key2(byteArray43, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray43, 100);
        java.lang.Class<?> wildcardClass54 = byteArray43.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_25.key2(byteArray35, 0);
        staticSaltsABMC1_17.key2(byteArray35, 100);
        byte[] byteArray48 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_17.key2(byteArray48, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_51.key2(byteArray58, (int) (byte) 10);
        staticSaltsABMC1_17.key2(byteArray58, (int) (short) -1);
        byte[] byteArray65 = null;
        staticSaltsABMC1_17.key2(byteArray65, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_76.key2(byteArray86, 0);
        staticSaltsABMC1_68.key2(byteArray86, 100);
        staticSaltsABMC1_17.key2(byteArray86, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray86, (int) (byte) 1);
        java.lang.Class<?> wildcardClass97 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        byte[] byteArray12 = null;
        staticSaltsABMC1_0.key2(byteArray12, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_15.key2(byteArray22, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABMC1_27.key2(byteArray39, (int) (short) 0);
        staticSaltsABMC1_15.key2(byteArray39, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_15.key2(byteArray46, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_49.key2(byteArray66, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray74, 10);
        staticSaltsABMC1_49.key2(byteArray74, (int) (short) 100);
        staticSaltsABMC1_15.key2(byteArray74, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray74, (int) (byte) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray47 = null;
        staticSaltsABMC1_39.key2(byteArray47, (int) (short) 100);
        byte[] byteArray50 = null;
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray69, 10);
        staticSaltsABMC1_61.key2(byteArray69, 10);
        staticSaltsABMC1_53.key2(byteArray69, (int) (short) 1);
        staticSaltsABMC1_39.key2(byteArray69, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray69, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray87, (int) '#');
        staticSaltsABMC1_80.key2(byteArray87, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray87, (int) (byte) 0);
        java.lang.Class<?> wildcardClass94 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_12.key2(byteArray23, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray34, 10);
        staticSaltsABMC1_26.key2(byteArray34, 10);
        staticSaltsABMC1_12.key2(byteArray34, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray34, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_43.key2(byteArray53, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_43.key2(byteArray60, (-1));
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_43.key2(byteArray70, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray76, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_73.key2(byteArray81, (int) (short) 1);
        staticSaltsABMC1_43.key2(byteArray81, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray81, (int) (byte) 100);
        java.lang.Class<?> wildcardClass90 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_16.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_49.key2(byteArray60, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray60, (int) 'a');
        staticSaltsABMC1_16.key2(byteArray60, (-1));
        staticSaltsABMC1_0.key2(byteArray60, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_70.key2(byteArray80, 0);
        staticSaltsABMC1_69.key2(byteArray80, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray80, 0);
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray26, 10);
        staticSaltsABMC1_18.key2(byteArray26, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray50, (int) 'a');
        staticSaltsABMC1_18.key2(byteArray50, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_18.key2(byteArray59, 0);
        staticSaltsABMC1_0.key2(byteArray59, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray74, 10);
        staticSaltsABMC1_66.key2(byteArray74, 10);
        staticSaltsABMC1_0.key2(byteArray74, (int) (byte) 10);
        java.lang.Class<?> wildcardClass81 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) 'a');
        byte[] byteArray17 = null;
        staticSaltsABMC1_0.key2(byteArray17, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_25.key2(byteArray36, (int) (short) 10);
        staticSaltsABMC1_20.key2(byteArray36, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_41.key2(byteArray51, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_41.key2(byteArray58, (-1));
        staticSaltsABMC1_20.key2(byteArray58, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_73.key2(byteArray84, (int) (short) 10);
        staticSaltsABMC1_65.key2(byteArray84, (int) 'a');
        staticSaltsABMC1_20.key2(byteArray84, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray84, (int) (short) 0);
        java.lang.Class<?> wildcardClass93 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_25.key2(byteArray36, (int) (short) 10);
        staticSaltsABMC1_17.key2(byteArray36, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABMC1_17.key2(byteArray52, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray52, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray62, 10);
        staticSaltsABMC1_0.key2(byteArray62, (int) (byte) 10);
        byte[] byteArray67 = null;
        staticSaltsABMC1_0.key2(byteArray67, (int) (byte) 10);
        java.lang.Class<?> wildcardClass70 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_16.key2(byteArray23, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_28.key2(byteArray39, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        staticSaltsABMC1_46.key2(byteArray57, (int) (byte) 1);
        staticSaltsABMC1_28.key2(byteArray57, (int) (byte) 0);
        staticSaltsABMC1_16.key2(byteArray57, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray76, 10);
        staticSaltsABMC1_68.key2(byteArray76, 10);
        byte[] byteArray81 = null;
        staticSaltsABMC1_68.key2(byteArray81, (int) (byte) 10);
        byte[] byteArray84 = null;
        staticSaltsABMC1_68.key2(byteArray84, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_87.key2(byteArray90, 10);
        staticSaltsABMC1_68.key2(byteArray90, (int) (short) 0);
        staticSaltsABMC1_16.key2(byteArray90, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray90, (int) ' ');
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        byte[] byteArray21 = null;
        staticSaltsABMC1_0.key2(byteArray21, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray46, 10);
        staticSaltsABMC1_38.key2(byteArray46, 10);
        staticSaltsABMC1_24.key2(byteArray46, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray46, (-1));
        java.lang.Class<?> wildcardClass55 = byteArray46.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray21 = null;
        staticSaltsABMC1_13.key2(byteArray21, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray32, 10);
        staticSaltsABMC1_24.key2(byteArray32, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_37.key2(byteArray56, (int) 'a');
        staticSaltsABMC1_24.key2(byteArray56, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_24.key2(byteArray65, 0);
        staticSaltsABMC1_13.key2(byteArray65, 0);
        staticSaltsABMC1_0.key2(byteArray65, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_0.key2(byteArray76, (int) (short) 0);
        java.lang.Class<?> wildcardClass81 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        byte[] byteArray17 = null;
        staticSaltsABMC1_9.key2(byteArray17, (int) (short) 100);
        byte[] byteArray20 = null;
        staticSaltsABMC1_9.key2(byteArray20, (int) (short) 0);
        byte[] byteArray23 = null;
        staticSaltsABMC1_9.key2(byteArray23, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_27.key2(byteArray38, (int) (short) 10);
        staticSaltsABMC1_26.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray51, 10);
        staticSaltsABMC1_43.key2(byteArray51, 10);
        staticSaltsABMC1_26.key2(byteArray51, (int) '4');
        staticSaltsABMC1_9.key2(byteArray51, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray51, (int) '#');
        java.lang.Class<?> wildcardClass62 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_37.key2(byteArray54, (-1));
        staticSaltsABMC1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABMC1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_67.key2(byteArray74, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray74, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_81.key2(byteArray84, (int) (short) 0);
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_81.key2(byteArray92, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray92, (int) (short) -1);
        java.lang.Class<?> wildcardClass97 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        staticSaltsABMC1_36.key2(byteArray47, (int) (byte) 1);
        staticSaltsABMC1_18.key2(byteArray47, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_58.key2(byteArray68, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_58.key2(byteArray75, (-1));
        staticSaltsABMC1_0.key2(byteArray75, (int) '4');
        java.lang.Class<?> wildcardClass82 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray22, 10);
        staticSaltsABMC1_14.key2(byteArray22, 10);
        staticSaltsABMC1_0.key2(byteArray22, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray37, 10);
        staticSaltsABMC1_29.key2(byteArray37, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_42.key2(byteArray61, (int) 'a');
        staticSaltsABMC1_29.key2(byteArray61, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_29.key2(byteArray70, 0);
        byte[] byteArray75 = null;
        staticSaltsABMC1_29.key2(byteArray75, (int) (byte) -1);
        byte[] byteArray78 = null;
        staticSaltsABMC1_29.key2(byteArray78, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray83, (int) '#');
        staticSaltsABMC1_29.key2(byteArray83, (-1));
        byte[] byteArray88 = null;
        staticSaltsABMC1_29.key2(byteArray88, (int) (short) 0);
        byte[] byteArray93 = new byte[] { (byte) 100, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray93, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray93, 10);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_9.key2(byteArray20, (int) (short) 10);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_9.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_32.key2(byteArray42, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        staticSaltsABMC1_32.key2(byteArray57, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        staticSaltsABMC1_32.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_74.key2(byteArray85, (int) (short) 10);
        staticSaltsABMC1_32.key2(byteArray85, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray85, 0);
        staticSaltsABMC1_0.key2(byteArray85, 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray35, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray56, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray56, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_63.key2(byteArray73, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_78.key2(byteArray88, 0);
        staticSaltsABMC1_63.key2(byteArray88, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray88, (int) (short) 0);
        java.lang.Class<?> wildcardClass97 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_34.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_34.key2(byteArray51, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray59, 10);
        staticSaltsABMC1_34.key2(byteArray59, (int) (short) 100);
        staticSaltsABMC1_0.key2(byteArray59, (int) (byte) 0);
        byte[] byteArray66 = null;
        staticSaltsABMC1_0.key2(byteArray66, (int) (byte) 0);
        byte[] byteArray69 = null;
        staticSaltsABMC1_0.key2(byteArray69, 100);
        java.lang.Class<?> wildcardClass72 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_12.key2(byteArray22, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_27.key2(byteArray37, 0);
        staticSaltsABMC1_12.key2(byteArray37, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        staticSaltsABMC1_12.key2(byteArray47, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray47, 10);
        byte[] byteArray56 = null;
        staticSaltsABMC1_0.key2(byteArray56, 1);
        byte[] byteArray59 = null;
        staticSaltsABMC1_0.key2(byteArray59, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_62.key2(byteArray69, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_75.key2(byteArray78, (int) (short) 0);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_75.key2(byteArray86, (int) (short) 10);
        staticSaltsABMC1_74.key2(byteArray86, (int) (short) 0);
        staticSaltsABMC1_62.key2(byteArray86, 0);
        staticSaltsABMC1_0.key2(byteArray86, (int) '4');
        java.lang.Class<?> wildcardClass95 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray52, (int) 'a');
        staticSaltsABMC1_25.key2(byteArray52, 100);
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_69.key2(byteArray79, 0);
        staticSaltsABMC1_61.key2(byteArray79, 100);
        staticSaltsABMC1_0.key2(byteArray79, (int) (short) -1);
        byte[] byteArray88 = null;
        staticSaltsABMC1_0.key2(byteArray88, 10);
        byte[] byteArray91 = null;
        staticSaltsABMC1_0.key2(byteArray91, (int) '#');
        java.lang.Class<?> wildcardClass94 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_0.key2(byteArray15, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_18.key2(byteArray25, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_30.key2(byteArray42, (int) (short) 0);
        staticSaltsABMC1_18.key2(byteArray42, 0);
        staticSaltsABMC1_0.key2(byteArray42, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_51.key2(byteArray68, (-1));
        byte[] byteArray78 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_51.key2(byteArray78, 10);
        staticSaltsABMC1_0.key2(byteArray78, 0);
        java.lang.Class<?> wildcardClass83 = byteArray78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_45.key2(byteArray63, 100);
        staticSaltsABMC1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray63, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray77, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray87, (int) '#');
        staticSaltsABMC1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray87, (-1));
        byte[] byteArray94 = null;
        staticSaltsABMC1_0.key2(byteArray94, 100);
        byte[] byteArray97 = null;
        staticSaltsABMC1_0.key2(byteArray97, (int) (short) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_34.key2(byteArray50, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray73, 10);
        staticSaltsABMC1_65.key2(byteArray73, 10);
        staticSaltsABMC1_57.key2(byteArray73, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 10);
        byte[] byteArray82 = null;
        staticSaltsABMC1_0.key2(byteArray82, (int) (short) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABMC1_18.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_51.key2(byteArray62, (int) (short) 10);
        staticSaltsABMC1_43.key2(byteArray62, (int) 'a');
        staticSaltsABMC1_35.key2(byteArray62, 100);
        staticSaltsABMC1_18.key2(byteArray62, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_71.key2(byteArray81, 0);
        staticSaltsABMC1_18.key2(byteArray81, (int) '#');
        staticSaltsABMC1_0.key2(byteArray81, (int) '#');
        java.lang.Class<?> wildcardClass90 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) 'a');
        byte[] byteArray17 = null;
        staticSaltsABMC1_0.key2(byteArray17, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_25.key2(byteArray36, (int) (short) 10);
        staticSaltsABMC1_20.key2(byteArray36, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_41.key2(byteArray51, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_41.key2(byteArray58, (-1));
        staticSaltsABMC1_20.key2(byteArray58, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_73.key2(byteArray84, (int) (short) 10);
        staticSaltsABMC1_65.key2(byteArray84, (int) 'a');
        staticSaltsABMC1_20.key2(byteArray84, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray84, (int) (short) 0);
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_13.key2(byteArray23, 0);
        staticSaltsABMC1_12.key2(byteArray23, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_31.key2(byteArray41, 0);
        staticSaltsABMC1_30.key2(byteArray41, (int) (byte) 1);
        staticSaltsABMC1_12.key2(byteArray41, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray41, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray60, 10);
        staticSaltsABMC1_52.key2(byteArray60, 10);
        byte[] byteArray65 = null;
        staticSaltsABMC1_52.key2(byteArray65, (int) (byte) 10);
        byte[] byteArray68 = null;
        staticSaltsABMC1_52.key2(byteArray68, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray74, 10);
        staticSaltsABMC1_52.key2(byteArray74, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray74, (int) (short) 0);
        byte[] byteArray81 = null;
        staticSaltsABMC1_0.key2(byteArray81, (int) (byte) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        staticSaltsABMC1_12.key2(byteArray23, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_31.key2(byteArray41, 0);
        staticSaltsABMC1_30.key2(byteArray41, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_48.key2(byteArray59, (int) (byte) 1);
        staticSaltsABMC1_30.key2(byteArray59, (int) (byte) 0);
        staticSaltsABMC1_12.key2(byteArray59, (int) '#');
        staticSaltsABMC1_0.key2(byteArray59, (int) (byte) -1);
        byte[] byteArray72 = null;
        staticSaltsABMC1_0.key2(byteArray72, (int) (short) 0);
        byte[] byteArray75 = null;
        staticSaltsABMC1_0.key2(byteArray75, (int) (byte) -1);
        java.lang.Class<?> wildcardClass78 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray45, 10);
        staticSaltsABMC1_0.key2(byteArray45, (int) (byte) -1);
        byte[] byteArray50 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray50, (int) ' ');
        byte[] byteArray53 = null;
        staticSaltsABMC1_0.key2(byteArray53, (int) (short) 100);
        byte[] byteArray56 = null;
        staticSaltsABMC1_0.key2(byteArray56, (int) (short) 0);
        java.lang.Class<?> wildcardClass59 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, 1);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_35.key2(byteArray46, (int) (short) 10);
        staticSaltsABMC1_27.key2(byteArray46, (int) 'a');
        staticSaltsABMC1_19.key2(byteArray46, 100);
        byte[] byteArray53 = null;
        staticSaltsABMC1_19.key2(byteArray53, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_56.key2(byteArray66, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_56.key2(byteArray73, (-1));
        staticSaltsABMC1_19.key2(byteArray73, (int) (byte) 0);
        byte[] byteArray80 = null;
        staticSaltsABMC1_19.key2(byteArray80, (int) (byte) 100);
        byte[] byteArray83 = null;
        staticSaltsABMC1_19.key2(byteArray83, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticSaltsABMC1_87.key2(byteArray89, (int) '#');
        staticSaltsABMC1_86.key2(byteArray89, (int) (short) 0);
        staticSaltsABMC1_19.key2(byteArray89, 0);
        staticSaltsABMC1_0.key2(byteArray89, (int) (short) 0);
        java.lang.Class<?> wildcardClass98 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray31, (int) (byte) 1);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray45, 10);
        staticSaltsABMC1_37.key2(byteArray45, 10);
        byte[] byteArray50 = null;
        staticSaltsABMC1_37.key2(byteArray50, (int) (byte) 10);
        byte[] byteArray53 = null;
        staticSaltsABMC1_37.key2(byteArray53, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray59, 10);
        staticSaltsABMC1_37.key2(byteArray59, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray59, (int) '#');
        java.lang.Class<?> wildcardClass66 = byteArray59.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        byte[] byteArray17 = null;
        staticSaltsABMC1_9.key2(byteArray17, (int) (short) 100);
        byte[] byteArray20 = null;
        staticSaltsABMC1_9.key2(byteArray20, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_47.key2(byteArray58, (int) (short) 10);
        byte[] byteArray61 = null;
        staticSaltsABMC1_47.key2(byteArray61, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_64.key2(byteArray74, 0);
        staticSaltsABMC1_47.key2(byteArray74, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_81.key2(byteArray87, (int) (short) 0);
        staticSaltsABMC1_47.key2(byteArray87, (int) (short) 1);
        staticSaltsABMC1_23.key2(byteArray87, (int) (byte) 10);
        staticSaltsABMC1_9.key2(byteArray87, 1);
        staticSaltsABMC1_0.key2(byteArray87, (int) (byte) -1);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        byte[] byteArray17 = null;
        staticSaltsABMC1_0.key2(byteArray17, (int) (byte) -1);
        byte[] byteArray20 = null;
        staticSaltsABMC1_0.key2(byteArray20, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_24.key2(byteArray34, 0);
        staticSaltsABMC1_23.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_41.key2(byteArray52, (int) (byte) 1);
        staticSaltsABMC1_23.key2(byteArray52, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray52, 100);
        java.lang.Class<?> wildcardClass63 = byteArray52.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABMC1_51.key2(byteArray67, (int) (byte) 0);
        staticSaltsABMC1_17.key2(byteArray67, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray67, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray87, (int) '#');
        staticSaltsABMC1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABMC1_76.key2(byteArray87, 1);
        staticSaltsABMC1_0.key2(byteArray87, (int) (byte) 1);
        java.lang.Class<?> wildcardClass96 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_45.key2(byteArray63, 100);
        staticSaltsABMC1_24.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_72.key2(byteArray82, 0);
        staticSaltsABMC1_24.key2(byteArray82, (int) '#');
        staticSaltsABMC1_0.key2(byteArray82, (-1));
        byte[] byteArray91 = null;
        staticSaltsABMC1_0.key2(byteArray91, 0);
        java.lang.Class<?> wildcardClass94 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        byte[] byteArray47 = null;
        staticSaltsABMC1_0.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray66, 10);
        staticSaltsABMC1_58.key2(byteArray66, 10);
        staticSaltsABMC1_50.key2(byteArray66, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray66, (int) (short) 0);
        byte[] byteArray75 = null;
        staticSaltsABMC1_0.key2(byteArray75, 100);
        java.lang.Class<?> wildcardClass78 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_17.key2(byteArray28, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray28, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray44, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_59.key2(byteArray70, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray81, 10);
        staticSaltsABMC1_73.key2(byteArray81, 10);
        staticSaltsABMC1_59.key2(byteArray81, (int) (short) 10);
        byte[] byteArray92 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_59.key2(byteArray92, (int) (short) 0);
        staticSaltsABMC1_51.key2(byteArray92, 0);
        staticSaltsABMC1_0.key2(byteArray92, (int) (short) 1);
        java.lang.Class<?> wildcardClass99 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_48.key2(byteArray58, 0);
        staticSaltsABMC1_0.key2(byteArray58, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_65.key2(byteArray75, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_65.key2(byteArray82, (-1));
        staticSaltsABMC1_0.key2(byteArray82, (int) (byte) 0);
        byte[] byteArray89 = null;
        staticSaltsABMC1_0.key2(byteArray89, (int) ' ');
        java.lang.Class<?> wildcardClass92 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_37.key2(byteArray48, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_56.key2(byteArray66, 0);
        staticSaltsABMC1_55.key2(byteArray66, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_74.key2(byteArray84, 0);
        staticSaltsABMC1_73.key2(byteArray84, (int) (byte) 1);
        staticSaltsABMC1_55.key2(byteArray84, (int) (byte) 0);
        staticSaltsABMC1_37.key2(byteArray84, (int) '#');
        staticSaltsABMC1_0.key2(byteArray84, (int) (byte) 0);
        byte[] byteArray97 = null;
        staticSaltsABMC1_0.key2(byteArray97, 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_54.key2(byteArray65, (int) (short) 10);
        staticSaltsABMC1_49.key2(byteArray65, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray65, (int) (short) 1);
        java.lang.Class<?> wildcardClass72 = byteArray65.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray16, 10);
        staticSaltsABMC1_8.key2(byteArray16, 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (short) 1);
        byte[] byteArray23 = null;
        staticSaltsABMC1_0.key2(byteArray23, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_26.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_26.key2(byteArray36, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_26.key2(byteArray43, (-1));
        staticSaltsABMC1_0.key2(byteArray43, (int) (short) 0);
        java.lang.Class<?> wildcardClass50 = byteArray43.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_45.key2(byteArray63, 100);
        staticSaltsABMC1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray63, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_82.key2(byteArray85, (int) (short) 0);
        staticSaltsABMC1_74.key2(byteArray85, 1);
        staticSaltsABMC1_0.key2(byteArray85, (int) (short) 10);
        byte[] byteArray94 = null;
        staticSaltsABMC1_0.key2(byteArray94, (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_18.key2(byteArray21, (int) (short) 0);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_18.key2(byteArray29, (int) (short) 10);
        staticSaltsABMC1_17.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray42, 10);
        staticSaltsABMC1_34.key2(byteArray42, 10);
        staticSaltsABMC1_17.key2(byteArray42, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_50.key2(byteArray60, 0);
        staticSaltsABMC1_49.key2(byteArray60, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_68.key2(byteArray78, 0);
        staticSaltsABMC1_67.key2(byteArray78, (int) (byte) 1);
        staticSaltsABMC1_49.key2(byteArray78, (int) (byte) 0);
        staticSaltsABMC1_17.key2(byteArray78, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray78, (int) 'a');
        byte[] byteArray91 = null;
        staticSaltsABMC1_0.key2(byteArray91, (int) 'a');
        java.lang.Class<?> wildcardClass94 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_26.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_34.key2(byteArray45, (int) (short) 10);
        staticSaltsABMC1_26.key2(byteArray45, (int) 'a');
        staticSaltsABMC1_18.key2(byteArray45, 100);
        byte[] byteArray52 = null;
        staticSaltsABMC1_18.key2(byteArray52, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        staticSaltsABMC1_55.key2(byteArray66, 1);
        staticSaltsABMC1_18.key2(byteArray66, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_75.key2(byteArray82, (int) (byte) 10);
        staticSaltsABMC1_18.key2(byteArray82, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray82, (int) (short) -1);
        byte[] byteArray91 = null;
        staticSaltsABMC1_0.key2(byteArray91, (int) (short) 100);
        byte[] byteArray94 = null;
        staticSaltsABMC1_0.key2(byteArray94, (int) 'a');
        java.lang.Class<?> wildcardClass97 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_21.key2(byteArray39, 100);
        staticSaltsABMC1_0.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_48.key2(byteArray58, 0);
        staticSaltsABMC1_0.key2(byteArray58, (int) '#');
        byte[] byteArray66 = new byte[] { (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray66, (int) (short) 1);
        byte[] byteArray69 = null;
        staticSaltsABMC1_0.key2(byteArray69, (int) (byte) 0);
        byte[] byteArray72 = null;
        staticSaltsABMC1_0.key2(byteArray72, 10);
        java.lang.Class<?> wildcardClass75 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticSaltsABMC1_11.key2(byteArray13, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray19, 10);
        staticSaltsABMC1_11.key2(byteArray19, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_32.key2(byteArray43, (int) (short) 10);
        staticSaltsABMC1_24.key2(byteArray43, (int) 'a');
        staticSaltsABMC1_11.key2(byteArray43, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_11.key2(byteArray52, 0);
        staticSaltsABMC1_0.key2(byteArray52, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray62, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_0.key2(byteArray71, 100);
        java.lang.Class<?> wildcardClass76 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABMC1_7.key2(byteArray9, (int) '#');
        staticSaltsABMC1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_14.key2(byteArray25, (int) (byte) 1);
        staticSaltsABMC1_6.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) (byte) -1);
        byte[] byteArray36 = null;
        staticSaltsABMC1_0.key2(byteArray36, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray47, 10);
        staticSaltsABMC1_39.key2(byteArray47, 10);
        staticSaltsABMC1_0.key2(byteArray47, (int) (byte) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_21.key2(byteArray38, (-1));
        staticSaltsABMC1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_55.key2(byteArray65, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_55.key2(byteArray72, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray80, 10);
        staticSaltsABMC1_55.key2(byteArray80, (int) (short) 100);
        staticSaltsABMC1_0.key2(byteArray80, (int) ' ');
        byte[] byteArray87 = null;
        staticSaltsABMC1_0.key2(byteArray87, (int) (short) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, 1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, 1);
        byte[] byteArray55 = null;
        staticSaltsABMC1_0.key2(byteArray55, 100);
        byte[] byteArray58 = null;
        staticSaltsABMC1_0.key2(byteArray58, (int) 'a');
        java.lang.Class<?> wildcardClass61 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABMC1_7.key2(byteArray9, (int) '#');
        staticSaltsABMC1_6.key2(byteArray9, (int) (short) 0);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_6.key2(byteArray17, (int) (short) 10);
        staticSaltsABMC1_1.key2(byteArray17, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray30, 10);
        staticSaltsABMC1_22.key2(byteArray30, 10);
        staticSaltsABMC1_1.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_37.key2(byteArray56, (int) 'a');
        staticSaltsABMC1_1.key2(byteArray56, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_63.key2(byteArray73, 0);
        staticSaltsABMC1_1.key2(byteArray73, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray73, 100);
        java.lang.Class<?> wildcardClass82 = byteArray73.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray27, 10);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_33.key2(byteArray53, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray53, (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_17.key2(byteArray28, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_17.key2(byteArray42, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        staticSaltsABMC1_17.key2(byteArray57, 0);
        staticSaltsABMC1_0.key2(byteArray57, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_66.key2(byteArray77, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray77, (int) (byte) 10);
        byte[] byteArray82 = null;
        staticSaltsABMC1_0.key2(byteArray82, 100);
        java.lang.Class<?> wildcardClass85 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_38.key2(byteArray48, 0);
        staticSaltsABMC1_30.key2(byteArray48, 100);
        staticSaltsABMC1_0.key2(byteArray48, 1);
        byte[] byteArray57 = null;
        staticSaltsABMC1_0.key2(byteArray57, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray63, 0);
        java.lang.Class<?> wildcardClass70 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray17, 10);
        staticSaltsABMC1_9.key2(byteArray17, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABMC1_22.key2(byteArray41, (int) 'a');
        staticSaltsABMC1_9.key2(byteArray41, 1);
        staticSaltsABMC1_0.key2(byteArray41, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray72, 10);
        staticSaltsABMC1_64.key2(byteArray72, 10);
        staticSaltsABMC1_50.key2(byteArray72, (int) (short) 10);
        byte[] byteArray83 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_50.key2(byteArray83, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray83, (int) '4');
        byte[] byteArray88 = null;
        staticSaltsABMC1_0.key2(byteArray88, (int) (byte) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        staticSaltsABMC1_15.key2(byteArray42, 100);
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 10);
        byte[] byteArray51 = null;
        staticSaltsABMC1_0.key2(byteArray51, 100);
        byte[] byteArray54 = null;
        staticSaltsABMC1_0.key2(byteArray54, 0);
        byte[] byteArray57 = null;
        staticSaltsABMC1_0.key2(byteArray57, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_60.key2(byteArray66, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray66, 100);
        java.lang.Class<?> wildcardClass71 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_37.key2(byteArray54, (-1));
        staticSaltsABMC1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABMC1_0.key2(byteArray61, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_64.key2(byteArray74, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_64.key2(byteArray81, (-1));
        staticSaltsABMC1_0.key2(byteArray81, (int) '4');
        byte[] byteArray88 = null;
        staticSaltsABMC1_0.key2(byteArray88, (int) 'a');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABMC1_0.key2(byteArray5, 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABMC1_12.key2(byteArray14, (int) '#');
        staticSaltsABMC1_11.key2(byteArray14, (int) (short) 0);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_11.key2(byteArray22, (int) (short) 10);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_11.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_42.key2(byteArray61, (int) 'a');
        staticSaltsABMC1_34.key2(byteArray61, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_73.key2(byteArray84, (int) (short) 10);
        staticSaltsABMC1_68.key2(byteArray84, (int) (byte) 0);
        staticSaltsABMC1_34.key2(byteArray84, (int) (byte) 10);
        staticSaltsABMC1_11.key2(byteArray84, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray84, (int) (byte) 100);
        java.lang.Class<?> wildcardClass95 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_17.key2(byteArray28, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_17.key2(byteArray42, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        staticSaltsABMC1_17.key2(byteArray57, 0);
        staticSaltsABMC1_0.key2(byteArray57, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_66.key2(byteArray77, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray77, (int) (byte) 10);
        java.lang.Class<?> wildcardClass82 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_43.key2(byteArray53, 0);
        staticSaltsABMC1_35.key2(byteArray53, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_76.key2(byteArray87, (int) (short) 10);
        staticSaltsABMC1_68.key2(byteArray87, (int) 'a');
        staticSaltsABMC1_60.key2(byteArray87, 100);
        staticSaltsABMC1_35.key2(byteArray87, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray87, 0);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray35 = null;
        staticSaltsABMC1_0.key2(byteArray35, (-1));
        byte[] byteArray38 = null;
        staticSaltsABMC1_0.key2(byteArray38, (int) (short) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_22.key2(byteArray33, (int) (short) 10);
        staticSaltsABMC1_17.key2(byteArray33, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_46.key2(byteArray56, 0);
        staticSaltsABMC1_38.key2(byteArray56, 100);
        staticSaltsABMC1_17.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_65.key2(byteArray75, 0);
        staticSaltsABMC1_17.key2(byteArray75, (int) '#');
        staticSaltsABMC1_0.key2(byteArray75, (int) ' ');
        byte[] byteArray84 = null;
        staticSaltsABMC1_0.key2(byteArray84, (int) (short) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_34.key2(byteArray44, 0);
        byte[] byteArray49 = null;
        staticSaltsABMC1_34.key2(byteArray49, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_52.key2(byteArray59, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_65.key2(byteArray76, (int) (short) 10);
        staticSaltsABMC1_64.key2(byteArray76, (int) (short) 0);
        staticSaltsABMC1_52.key2(byteArray76, 0);
        staticSaltsABMC1_34.key2(byteArray76, (int) '4');
        staticSaltsABMC1_0.key2(byteArray76, (int) (short) 1);
        java.lang.Class<?> wildcardClass87 = byteArray76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray46, 10);
        staticSaltsABMC1_38.key2(byteArray46, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_59.key2(byteArray70, (int) (short) 10);
        staticSaltsABMC1_51.key2(byteArray70, (int) 'a');
        staticSaltsABMC1_38.key2(byteArray70, 1);
        staticSaltsABMC1_37.key2(byteArray70, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray70, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_81.key2(byteArray84, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray84, (int) (byte) 1);
        byte[] byteArray91 = null;
        staticSaltsABMC1_0.key2(byteArray91, 10);
        java.lang.Class<?> wildcardClass94 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABMC1_14.key2(byteArray30, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_35.key2(byteArray52, (-1));
        staticSaltsABMC1_14.key2(byteArray52, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_67.key2(byteArray78, (int) (short) 10);
        staticSaltsABMC1_59.key2(byteArray78, (int) 'a');
        staticSaltsABMC1_14.key2(byteArray78, (int) ' ');
        byte[] byteArray85 = new byte[] {};
        staticSaltsABMC1_14.key2(byteArray85, (int) '#');
        staticSaltsABMC1_0.key2(byteArray85, (int) (short) 1);
        byte[] byteArray90 = null;
        staticSaltsABMC1_0.key2(byteArray90, (int) (short) 10);
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_20.key2(byteArray31, (int) (short) 10);
        staticSaltsABMC1_19.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_36.key2(byteArray47, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_36.key2(byteArray61, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_66.key2(byteArray76, 0);
        staticSaltsABMC1_36.key2(byteArray76, 0);
        staticSaltsABMC1_19.key2(byteArray76, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray76, (int) (byte) 100);
        java.lang.Class<?> wildcardClass87 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_38.key2(byteArray49, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray49, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray62, 10);
        staticSaltsABMC1_54.key2(byteArray62, 10);
        staticSaltsABMC1_33.key2(byteArray62, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray62, (int) (short) 0);
        byte[] byteArray71 = null;
        staticSaltsABMC1_0.key2(byteArray71, (int) '#');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_36.key2(byteArray46, 0);
        staticSaltsABMC1_35.key2(byteArray46, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_54.key2(byteArray64, 0);
        staticSaltsABMC1_53.key2(byteArray64, (int) (byte) 1);
        staticSaltsABMC1_35.key2(byteArray64, (int) (byte) 0);
        staticSaltsABMC1_30.key2(byteArray64, (-1));
        staticSaltsABMC1_0.key2(byteArray64, (int) (short) 10);
        java.lang.Class<?> wildcardClass77 = byteArray64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABMC1_7.key2(byteArray9, (int) '#');
        staticSaltsABMC1_6.key2(byteArray9, (int) (short) 0);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_6.key2(byteArray17, (int) (short) 10);
        staticSaltsABMC1_1.key2(byteArray17, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_22.key2(byteArray40, 100);
        staticSaltsABMC1_1.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_1.key2(byteArray59, (int) '#');
        staticSaltsABMC1_0.key2(byteArray59, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_69.key2(byteArray79, 0);
        staticSaltsABMC1_68.key2(byteArray79, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray79, 100);
        java.lang.Class<?> wildcardClass88 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray25 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray25, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray36, 10);
        staticSaltsABMC1_28.key2(byteArray36, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_49.key2(byteArray60, (int) (short) 10);
        staticSaltsABMC1_41.key2(byteArray60, (int) 'a');
        staticSaltsABMC1_28.key2(byteArray60, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_28.key2(byteArray69, 0);
        byte[] byteArray74 = null;
        staticSaltsABMC1_28.key2(byteArray74, (int) (byte) -1);
        byte[] byteArray77 = null;
        staticSaltsABMC1_28.key2(byteArray77, (int) (byte) 1);
        byte[] byteArray80 = null;
        staticSaltsABMC1_28.key2(byteArray80, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_88 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticSaltsABMC1_88.key2(byteArray90, (int) '#');
        staticSaltsABMC1_83.key2(byteArray90, (int) (byte) 10);
        staticSaltsABMC1_28.key2(byteArray90, 100);
        staticSaltsABMC1_0.key2(byteArray90, (-1));
        java.lang.Class<?> wildcardClass99 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_22.key2(byteArray33, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_36.key2(byteArray47, (int) (short) 10);
        staticSaltsABMC1_22.key2(byteArray47, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_22.key2(byteArray62, 0);
        staticSaltsABMC1_8.key2(byteArray62, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_72.key2(byteArray83, (int) (short) 10);
        staticSaltsABMC1_71.key2(byteArray83, (int) (short) 0);
        staticSaltsABMC1_8.key2(byteArray83, 1);
        staticSaltsABMC1_0.key2(byteArray83, (-1));
        byte[] byteArray92 = null;
        staticSaltsABMC1_0.key2(byteArray92, (int) (byte) -1);
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray59, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_65.key2(byteArray75, 0);
        staticSaltsABMC1_64.key2(byteArray75, (int) (byte) 1);
        staticSaltsABMC1_40.key2(byteArray75, 1);
        staticSaltsABMC1_0.key2(byteArray75, (int) (short) 1);
        byte[] byteArray86 = null;
        staticSaltsABMC1_0.key2(byteArray86, 10);
        byte[] byteArray89 = null;
        staticSaltsABMC1_0.key2(byteArray89, (int) (byte) 10);
        java.lang.Class<?> wildcardClass92 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_55.key2(byteArray62, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray62, (int) ' ');
        byte[] byteArray69 = null;
        staticSaltsABMC1_0.key2(byteArray69, 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        staticSaltsABMC1_42.key2(byteArray53, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_61.key2(byteArray72, (int) (short) 10);
        staticSaltsABMC1_60.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray85, 10);
        staticSaltsABMC1_77.key2(byteArray85, 10);
        staticSaltsABMC1_60.key2(byteArray85, (int) '4');
        staticSaltsABMC1_42.key2(byteArray85, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray85, (int) 'a');
        byte[] byteArray96 = null;
        staticSaltsABMC1_0.key2(byteArray96, (int) (short) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        staticSaltsABMC1_13.key2(byteArray31, 100);
        byte[] byteArray44 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_13.key2(byteArray44, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray55, 10);
        staticSaltsABMC1_47.key2(byteArray55, 10);
        staticSaltsABMC1_13.key2(byteArray55, (int) '4');
        staticSaltsABMC1_0.key2(byteArray55, 0);
        byte[] byteArray64 = null;
        staticSaltsABMC1_0.key2(byteArray64, (int) '#');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_40.key2(byteArray51, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray62, 10);
        staticSaltsABMC1_54.key2(byteArray62, 10);
        staticSaltsABMC1_40.key2(byteArray62, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray62, (int) ' ');
        java.lang.Class<?> wildcardClass71 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_0.key2(byteArray15, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray26, 10);
        staticSaltsABMC1_18.key2(byteArray26, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray50, (int) 'a');
        staticSaltsABMC1_18.key2(byteArray50, 1);
        staticSaltsABMC1_0.key2(byteArray50, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        staticSaltsABMC1_59.key2(byteArray70, 1);
        staticSaltsABMC1_0.key2(byteArray70, (int) (byte) -1);
        java.lang.Class<?> wildcardClass79 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_18.key2(byteArray21, (int) (short) 0);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_18.key2(byteArray29, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        staticSaltsABMC1_34.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_52.key2(byteArray63, (int) (byte) 1);
        staticSaltsABMC1_34.key2(byteArray63, (int) (byte) 0);
        staticSaltsABMC1_13.key2(byteArray63, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray63, (int) (byte) 10);
        byte[] byteArray76 = null;
        staticSaltsABMC1_0.key2(byteArray76, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray87, 10);
        staticSaltsABMC1_79.key2(byteArray87, 10);
        staticSaltsABMC1_0.key2(byteArray87, (int) '#');
        java.lang.Class<?> wildcardClass94 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_37.key2(byteArray48, 1);
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) -1);
        byte[] byteArray57 = null;
        staticSaltsABMC1_0.key2(byteArray57, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_69.key2(byteArray79, 0);
        staticSaltsABMC1_68.key2(byteArray79, (int) (byte) 1);
        staticSaltsABMC1_60.key2(byteArray79, 0);
        staticSaltsABMC1_0.key2(byteArray79, (int) ' ');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray26, 10);
        staticSaltsABMC1_18.key2(byteArray26, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray50, (int) 'a');
        staticSaltsABMC1_18.key2(byteArray50, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_18.key2(byteArray59, 0);
        staticSaltsABMC1_0.key2(byteArray59, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray74, 10);
        staticSaltsABMC1_66.key2(byteArray74, 10);
        staticSaltsABMC1_0.key2(byteArray74, (int) (byte) 10);
        java.lang.Class<?> wildcardClass81 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, 100);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (short) -1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_71.key2(byteArray82, (int) (short) 10);
        staticSaltsABMC1_63.key2(byteArray82, (int) 'a');
        staticSaltsABMC1_55.key2(byteArray82, 100);
        staticSaltsABMC1_0.key2(byteArray82, 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_12.key2(byteArray22, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_27.key2(byteArray37, 0);
        staticSaltsABMC1_12.key2(byteArray37, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        staticSaltsABMC1_12.key2(byteArray47, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray47, 10);
        byte[] byteArray56 = null;
        staticSaltsABMC1_0.key2(byteArray56, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray62, 10);
        staticSaltsABMC1_0.key2(byteArray62, (int) ' ');
        byte[] byteArray67 = null;
        staticSaltsABMC1_0.key2(byteArray67, (int) (byte) 1);
        java.lang.Class<?> wildcardClass70 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_47.key2(byteArray64, (-1));
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 10);
        byte[] byteArray71 = null;
        staticSaltsABMC1_0.key2(byteArray71, 0);
        byte[] byteArray74 = null;
        staticSaltsABMC1_0.key2(byteArray74, (int) ' ');
        java.lang.Class<?> wildcardClass77 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        staticSaltsABMC1_17.key2(byteArray25, 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_32.key2(byteArray42, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        staticSaltsABMC1_32.key2(byteArray57, (int) 'a');
        byte[] byteArray64 = null;
        staticSaltsABMC1_32.key2(byteArray64, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_67.key2(byteArray77, 0);
        staticSaltsABMC1_32.key2(byteArray77, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray77, (int) (short) 0);
        java.lang.Class<?> wildcardClass86 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray16, 10);
        staticSaltsABMC1_8.key2(byteArray16, 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_44.key2(byteArray62, 100);
        staticSaltsABMC1_23.key2(byteArray62, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray62, (int) (byte) 1);
        byte[] byteArray73 = null;
        staticSaltsABMC1_0.key2(byteArray73, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_0.key2(byteArray78, (int) ' ');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray45, 10);
        staticSaltsABMC1_0.key2(byteArray45, (int) (byte) -1);
        byte[] byteArray50 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray50, (int) ' ');
        byte[] byteArray53 = null;
        staticSaltsABMC1_0.key2(byteArray53, (int) (short) 100);
        byte[] byteArray56 = null;
        staticSaltsABMC1_0.key2(byteArray56, 100);
        byte[] byteArray59 = null;
        staticSaltsABMC1_0.key2(byteArray59, (int) (short) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_45.key2(byteArray55, 0);
        staticSaltsABMC1_37.key2(byteArray55, 100);
        staticSaltsABMC1_0.key2(byteArray55, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_72.key2(byteArray83, (int) (short) 10);
        staticSaltsABMC1_64.key2(byteArray83, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray83, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_90 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray92 = new byte[] { (byte) 100 };
        staticSaltsABMC1_90.key2(byteArray92, (int) '#');
        staticSaltsABMC1_0.key2(byteArray92, (int) (byte) 1);
        java.lang.Class<?> wildcardClass97 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray16, 10);
        staticSaltsABMC1_8.key2(byteArray16, 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_23.key2(byteArray31, (int) (short) 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_23.key2(byteArray34, (int) (short) 0);
        byte[] byteArray37 = null;
        staticSaltsABMC1_23.key2(byteArray37, (int) 'a');
        byte[] byteArray40 = null;
        staticSaltsABMC1_23.key2(byteArray40, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABMC1_43.key2(byteArray59, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_72.key2(byteArray82, 0);
        staticSaltsABMC1_64.key2(byteArray82, 100);
        staticSaltsABMC1_43.key2(byteArray82, (int) (short) 0);
        staticSaltsABMC1_23.key2(byteArray82, (-1));
        staticSaltsABMC1_0.key2(byteArray82, 1);
        java.lang.Class<?> wildcardClass95 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_12.key2(byteArray23, (int) (short) 10);
        staticSaltsABMC1_11.key2(byteArray23, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_44.key2(byteArray55, (int) (short) 10);
        staticSaltsABMC1_36.key2(byteArray55, (int) 'a');
        staticSaltsABMC1_28.key2(byteArray55, 100);
        staticSaltsABMC1_11.key2(byteArray55, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_64.key2(byteArray75, (int) (short) 10);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_64.key2(byteArray84, (int) (short) 0);
        staticSaltsABMC1_11.key2(byteArray84, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray84, 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        byte[] byteArray18 = null;
        staticSaltsABMC1_0.key2(byteArray18, (int) (short) 100);
        java.lang.Class<?> wildcardClass21 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray50, (int) 'a');
        staticSaltsABMC1_23.key2(byteArray50, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_62.key2(byteArray73, (int) (short) 10);
        staticSaltsABMC1_57.key2(byteArray73, (int) (byte) 0);
        staticSaltsABMC1_23.key2(byteArray73, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray73, (int) (byte) 1);
        java.lang.Class<?> wildcardClass82 = byteArray73.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_37.key2(byteArray54, (-1));
        staticSaltsABMC1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABMC1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 0);
        byte[] byteArray67 = null;
        staticSaltsABMC1_0.key2(byteArray67, 0);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_23.key2(byteArray33, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_38.key2(byteArray48, 0);
        staticSaltsABMC1_23.key2(byteArray48, (int) 'a');
        byte[] byteArray55 = null;
        staticSaltsABMC1_23.key2(byteArray55, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_58.key2(byteArray74, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray82, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray87, (int) '#');
        staticSaltsABMC1_79.key2(byteArray87, (int) (short) 1);
        staticSaltsABMC1_58.key2(byteArray87, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray87, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray87, (int) '4');
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray50, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) 1);
        byte[] byteArray57 = null;
        staticSaltsABMC1_0.key2(byteArray57, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_60.key2(byteArray70, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_75.key2(byteArray78, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_75.key2(byteArray85, 0);
        staticSaltsABMC1_60.key2(byteArray85, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray85, 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_22.key2(byteArray32, 0);
        staticSaltsABMC1_14.key2(byteArray32, 100);
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_14.key2(byteArray45, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray45, (int) (byte) 10);
        java.lang.Class<?> wildcardClass50 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_9.key2(byteArray19, 0);
        staticSaltsABMC1_8.key2(byteArray19, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray19, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_29.key2(byteArray40, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_52.key2(byteArray63, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_71.key2(byteArray81, 0);
        staticSaltsABMC1_70.key2(byteArray81, (int) (byte) 1);
        staticSaltsABMC1_52.key2(byteArray81, (int) (byte) 0);
        staticSaltsABMC1_47.key2(byteArray81, (-1));
        staticSaltsABMC1_29.key2(byteArray81, (int) '4');
        staticSaltsABMC1_28.key2(byteArray81, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray81, (int) (byte) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray32, 10);
        staticSaltsABMC1_24.key2(byteArray32, 10);
        staticSaltsABMC1_16.key2(byteArray32, (int) (short) 1);
        byte[] byteArray39 = null;
        staticSaltsABMC1_16.key2(byteArray39, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_42.key2(byteArray59, (-1));
        staticSaltsABMC1_16.key2(byteArray59, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray59, (int) (byte) 10);
        java.lang.Class<?> wildcardClass68 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_42.key2(byteArray53, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray53, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_0.key2(byteArray60, (int) 'a');
        java.lang.Class<?> wildcardClass65 = byteArray60.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        byte[] byteArray42 = null;
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_50.key2(byteArray60, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_65.key2(byteArray75, 0);
        staticSaltsABMC1_50.key2(byteArray75, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_82.key2(byteArray85, (int) (short) 0);
        staticSaltsABMC1_50.key2(byteArray85, (int) (short) 0);
        staticSaltsABMC1_45.key2(byteArray85, 100);
        staticSaltsABMC1_0.key2(byteArray85, (int) '#');
        byte[] byteArray96 = null;
        staticSaltsABMC1_0.key2(byteArray96, (int) (short) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray17, 10);
        staticSaltsABMC1_9.key2(byteArray17, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABMC1_22.key2(byteArray41, (int) 'a');
        staticSaltsABMC1_9.key2(byteArray41, 1);
        staticSaltsABMC1_0.key2(byteArray41, (-1));
        byte[] byteArray50 = null;
        staticSaltsABMC1_0.key2(byteArray50, (int) '#');
        byte[] byteArray53 = null;
        staticSaltsABMC1_0.key2(byteArray53, (-1));
        java.lang.Class<?> wildcardClass56 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_62.key2(byteArray73, (int) (short) 10);
        staticSaltsABMC1_48.key2(byteArray73, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray73, 0);
        byte[] byteArray80 = null;
        staticSaltsABMC1_0.key2(byteArray80, (int) (byte) 0);
        byte[] byteArray83 = null;
        staticSaltsABMC1_0.key2(byteArray83, (-1));
        java.lang.Class<?> wildcardClass86 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_37.key2(byteArray48, 1);
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_62.key2(byteArray73, (int) (short) 10);
        staticSaltsABMC1_57.key2(byteArray73, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray81, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_78.key2(byteArray86, (int) (short) 1);
        staticSaltsABMC1_57.key2(byteArray86, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray86, 1);
        java.lang.Class<?> wildcardClass95 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticSaltsABMC1_11.key2(byteArray13, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_11.key2(byteArray27, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_33.key2(byteArray43, 0);
        staticSaltsABMC1_32.key2(byteArray43, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        staticSaltsABMC1_50.key2(byteArray61, (int) (byte) 1);
        staticSaltsABMC1_32.key2(byteArray61, (int) (byte) 0);
        staticSaltsABMC1_11.key2(byteArray61, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_77.key2(byteArray88, (int) (short) 10);
        staticSaltsABMC1_72.key2(byteArray88, (int) (byte) 0);
        staticSaltsABMC1_11.key2(byteArray88, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray88, (int) (byte) 0);
        byte[] byteArray97 = null;
        staticSaltsABMC1_0.key2(byteArray97, (int) (byte) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_16.key2(byteArray23, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_28.key2(byteArray39, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        staticSaltsABMC1_46.key2(byteArray57, (int) (byte) 1);
        staticSaltsABMC1_28.key2(byteArray57, (int) (byte) 0);
        staticSaltsABMC1_16.key2(byteArray57, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray76, 10);
        staticSaltsABMC1_68.key2(byteArray76, 10);
        byte[] byteArray81 = null;
        staticSaltsABMC1_68.key2(byteArray81, (int) (byte) 10);
        byte[] byteArray84 = null;
        staticSaltsABMC1_68.key2(byteArray84, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_87.key2(byteArray90, 10);
        staticSaltsABMC1_68.key2(byteArray90, (int) (short) 0);
        staticSaltsABMC1_16.key2(byteArray90, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray90, (int) ' ');
        java.lang.Class<?> wildcardClass99 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        staticSaltsABMC1_15.key2(byteArray42, 100);
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 10);
        byte[] byteArray51 = null;
        staticSaltsABMC1_0.key2(byteArray51, 100);
        byte[] byteArray54 = null;
        staticSaltsABMC1_0.key2(byteArray54, 0);
        byte[] byteArray57 = null;
        staticSaltsABMC1_0.key2(byteArray57, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_60.key2(byteArray66, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray66, 100);
        java.lang.Class<?> wildcardClass71 = byteArray66.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_37.key2(byteArray54, (-1));
        staticSaltsABMC1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABMC1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_67.key2(byteArray74, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray74, (-1));
        byte[] byteArray81 = null;
        staticSaltsABMC1_0.key2(byteArray81, (int) (byte) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_37.key2(byteArray44, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_49.key2(byteArray61, (int) (short) 0);
        staticSaltsABMC1_37.key2(byteArray61, 0);
        staticSaltsABMC1_0.key2(byteArray61, (int) (byte) 1);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, (int) (short) 0);
        byte[] byteArray73 = null;
        staticSaltsABMC1_0.key2(byteArray73, (int) (byte) 0);
        byte[] byteArray76 = null;
        staticSaltsABMC1_0.key2(byteArray76, (int) (byte) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        byte[] byteArray12 = null;
        staticSaltsABMC1_0.key2(byteArray12, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray24, 10);
        staticSaltsABMC1_16.key2(byteArray24, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABMC1_29.key2(byteArray48, (int) 'a');
        staticSaltsABMC1_16.key2(byteArray48, 1);
        staticSaltsABMC1_15.key2(byteArray48, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_58.key2(byteArray68, 0);
        staticSaltsABMC1_57.key2(byteArray68, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_76.key2(byteArray86, 0);
        staticSaltsABMC1_75.key2(byteArray86, (int) (byte) 1);
        staticSaltsABMC1_57.key2(byteArray86, (int) (byte) 0);
        staticSaltsABMC1_15.key2(byteArray86, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray86, (int) '#');
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_21.key2(byteArray39, 100);
        staticSaltsABMC1_0.key2(byteArray39, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray49, (int) 'a');
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_55.key2(byteArray66, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray77, 10);
        staticSaltsABMC1_69.key2(byteArray77, 10);
        staticSaltsABMC1_55.key2(byteArray77, (int) (short) 10);
        byte[] byteArray88 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_55.key2(byteArray88, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray88, (int) '4');
        byte[] byteArray93 = null;
        staticSaltsABMC1_0.key2(byteArray93, (int) (short) 100);
        byte[] byteArray96 = null;
        staticSaltsABMC1_0.key2(byteArray96, (int) 'a');
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_21.key2(byteArray38, (-1));
        staticSaltsABMC1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) 1);
        byte[] byteArray55 = null;
        staticSaltsABMC1_0.key2(byteArray55, (int) (byte) 0);
        java.lang.Class<?> wildcardClass58 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, 1);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_20.key2(byteArray30, 0);
        staticSaltsABMC1_19.key2(byteArray30, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_38.key2(byteArray48, 0);
        staticSaltsABMC1_37.key2(byteArray48, (int) (byte) 1);
        staticSaltsABMC1_19.key2(byteArray48, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_58.key2(byteArray69, (int) (short) 10);
        staticSaltsABMC1_57.key2(byteArray69, (int) (short) 0);
        staticSaltsABMC1_19.key2(byteArray69, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray79, 10);
        staticSaltsABMC1_19.key2(byteArray79, 0);
        staticSaltsABMC1_0.key2(byteArray79, (int) 'a');
        java.lang.Class<?> wildcardClass86 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_15.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        staticSaltsABMC1_15.key2(byteArray50, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray62, (int) '#');
        byte[] byteArray69 = null;
        staticSaltsABMC1_0.key2(byteArray69, (int) (byte) -1);
        byte[] byteArray72 = null;
        staticSaltsABMC1_0.key2(byteArray72, (int) (short) 10);
        byte[] byteArray75 = null;
        staticSaltsABMC1_0.key2(byteArray75, (int) (byte) 10);
        java.lang.Class<?> wildcardClass78 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        staticSaltsABMC1_15.key2(byteArray42, 100);
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 10);
        byte[] byteArray51 = null;
        staticSaltsABMC1_0.key2(byteArray51, 100);
        byte[] byteArray54 = null;
        staticSaltsABMC1_0.key2(byteArray54, 0);
        java.lang.Class<?> wildcardClass57 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray16, 10);
        staticSaltsABMC1_8.key2(byteArray16, 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_23.key2(byteArray33, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_23.key2(byteArray40, (-1));
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_23.key2(byteArray50, 10);
        byte[] byteArray53 = null;
        staticSaltsABMC1_23.key2(byteArray53, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        staticSaltsABMC1_56.key2(byteArray67, 1);
        staticSaltsABMC1_23.key2(byteArray67, (-1));
        staticSaltsABMC1_0.key2(byteArray67, (int) (short) 10);
        java.lang.Class<?> wildcardClass78 = byteArray67.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABMC1_29.key2(byteArray48, (int) 'a');
        staticSaltsABMC1_21.key2(byteArray48, 100);
        staticSaltsABMC1_0.key2(byteArray48, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_57.key2(byteArray74, (-1));
        staticSaltsABMC1_0.key2(byteArray74, (int) (byte) 0);
        byte[] byteArray81 = null;
        staticSaltsABMC1_0.key2(byteArray81, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray87, (int) '#');
        staticSaltsABMC1_84.key2(byteArray87, (int) (short) 0);
        byte[] byteArray95 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_84.key2(byteArray95, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray95, (int) (byte) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray33, 10);
        staticSaltsABMC1_25.key2(byteArray33, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray57, (int) 'a');
        staticSaltsABMC1_25.key2(byteArray57, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_25.key2(byteArray66, 0);
        byte[] byteArray71 = null;
        staticSaltsABMC1_25.key2(byteArray71, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_79.key2(byteArray82, (int) (short) 0);
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_79.key2(byteArray90, (int) (short) 10);
        staticSaltsABMC1_74.key2(byteArray90, (int) (byte) 0);
        staticSaltsABMC1_25.key2(byteArray90, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray90, (-1));
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_23.key2(byteArray33, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_38.key2(byteArray48, 0);
        staticSaltsABMC1_23.key2(byteArray48, (int) 'a');
        byte[] byteArray55 = null;
        staticSaltsABMC1_23.key2(byteArray55, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_58.key2(byteArray74, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray82, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray87, (int) '#');
        staticSaltsABMC1_79.key2(byteArray87, (int) (short) 1);
        staticSaltsABMC1_58.key2(byteArray87, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray87, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray87, (int) '4');
        java.lang.Class<?> wildcardClass98 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_37.key2(byteArray54, (-1));
        staticSaltsABMC1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABMC1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABMC1_0.key2(byteArray64, (int) ' ');
        byte[] byteArray67 = null;
        staticSaltsABMC1_0.key2(byteArray67, (int) '#');
        java.lang.Class<?> wildcardClass70 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABMC1_0.key2(byteArray5, 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABMC1_12.key2(byteArray14, (int) '#');
        staticSaltsABMC1_11.key2(byteArray14, (int) (short) 0);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_11.key2(byteArray22, (int) (short) 10);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_11.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_42.key2(byteArray61, (int) 'a');
        staticSaltsABMC1_34.key2(byteArray61, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_73.key2(byteArray84, (int) (short) 10);
        staticSaltsABMC1_68.key2(byteArray84, (int) (byte) 0);
        staticSaltsABMC1_34.key2(byteArray84, (int) (byte) 10);
        staticSaltsABMC1_11.key2(byteArray84, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray84, (int) (byte) 100);
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_37.key2(byteArray44, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_49.key2(byteArray61, (int) (short) 0);
        staticSaltsABMC1_37.key2(byteArray61, 0);
        staticSaltsABMC1_0.key2(byteArray61, (int) (byte) 1);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, (int) (short) 0);
        byte[] byteArray73 = null;
        staticSaltsABMC1_0.key2(byteArray73, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_0.key2(byteArray78, (int) '#');
        java.lang.Class<?> wildcardClass83 = byteArray78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_34.key2(byteArray52, 100);
        byte[] byteArray65 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_34.key2(byteArray65, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray65, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray73, (int) (byte) 10);
        byte[] byteArray80 = null;
        staticSaltsABMC1_0.key2(byteArray80, 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray45, 10);
        staticSaltsABMC1_0.key2(byteArray45, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_58.key2(byteArray68, 0);
        staticSaltsABMC1_50.key2(byteArray68, 100);
        staticSaltsABMC1_0.key2(byteArray68, (int) (byte) 10);
        byte[] byteArray77 = null;
        staticSaltsABMC1_0.key2(byteArray77, (int) (short) 0);
        byte[] byteArray80 = null;
        staticSaltsABMC1_0.key2(byteArray80, (int) ' ');
        java.lang.Class<?> wildcardClass83 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_21.key2(byteArray40, (int) 'a');
        staticSaltsABMC1_13.key2(byteArray40, 100);
        byte[] byteArray47 = null;
        staticSaltsABMC1_13.key2(byteArray47, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_50.key2(byteArray57, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_62.key2(byteArray74, (int) (short) 0);
        staticSaltsABMC1_50.key2(byteArray74, 0);
        staticSaltsABMC1_13.key2(byteArray74, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray74, (-1));
        java.lang.Class<?> wildcardClass85 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_23.key2(byteArray33, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_23.key2(byteArray40, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray48, 10);
        staticSaltsABMC1_23.key2(byteArray48, (int) (short) 100);
        staticSaltsABMC1_0.key2(byteArray48, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_55.key2(byteArray62, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_68.key2(byteArray79, (int) (short) 10);
        staticSaltsABMC1_67.key2(byteArray79, (int) (short) 0);
        staticSaltsABMC1_55.key2(byteArray79, 0);
        staticSaltsABMC1_0.key2(byteArray79, (int) '4');
        java.lang.Class<?> wildcardClass88 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray33, 10);
        staticSaltsABMC1_25.key2(byteArray33, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray57, (int) 'a');
        staticSaltsABMC1_25.key2(byteArray57, 1);
        staticSaltsABMC1_0.key2(byteArray57, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_66.key2(byteArray73, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 100);
        byte[] byteArray80 = null;
        staticSaltsABMC1_0.key2(byteArray80, 0);
        byte[] byteArray83 = null;
        staticSaltsABMC1_0.key2(byteArray83, 0);
        java.lang.Class<?> wildcardClass86 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (short) 1);
        byte[] byteArray40 = null;
        staticSaltsABMC1_0.key2(byteArray40, 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray56, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_61.key2(byteArray71, 0);
        staticSaltsABMC1_31.key2(byteArray71, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray81, 10);
        staticSaltsABMC1_31.key2(byteArray81, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray81, 0);
        byte[] byteArray88 = null;
        staticSaltsABMC1_0.key2(byteArray88, (int) (byte) 100);
        java.lang.Class<?> wildcardClass91 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray25 = null;
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_36.key2(byteArray47, (int) (short) 10);
        staticSaltsABMC1_28.key2(byteArray47, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_52.key2(byteArray63, (int) (short) 10);
        staticSaltsABMC1_28.key2(byteArray63, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_73.key2(byteArray84, (int) (short) 10);
        staticSaltsABMC1_68.key2(byteArray84, (int) (byte) 0);
        staticSaltsABMC1_28.key2(byteArray84, 0);
        staticSaltsABMC1_0.key2(byteArray84, 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray16, 10);
        staticSaltsABMC1_8.key2(byteArray16, 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_44.key2(byteArray62, 100);
        staticSaltsABMC1_23.key2(byteArray62, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray62, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray83, (int) '#');
        staticSaltsABMC1_73.key2(byteArray83, 0);
        staticSaltsABMC1_0.key2(byteArray83, (int) (byte) 0);
        byte[] byteArray90 = null;
        staticSaltsABMC1_0.key2(byteArray90, (-1));
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_17.key2(byteArray27, 0);
        staticSaltsABMC1_0.key2(byteArray27, (int) ' ');
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 100);
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, 10);
        java.lang.Class<?> wildcardClass40 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray37, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_44.key2(byteArray62, 100);
        byte[] byteArray69 = new byte[] {};
        staticSaltsABMC1_44.key2(byteArray69, (int) (byte) 100);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) 0, (byte) -1, (byte) 0, (byte) 10 };
        staticSaltsABMC1_44.key2(byteArray78, 10);
        staticSaltsABMC1_0.key2(byteArray78, (int) (short) 1);
        byte[] byteArray83 = null;
        staticSaltsABMC1_0.key2(byteArray83, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticSaltsABMC1_87.key2(byteArray89, (int) '#');
        staticSaltsABMC1_86.key2(byteArray89, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray89, (int) 'a');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_9.key2(byteArray19, 0);
        staticSaltsABMC1_8.key2(byteArray19, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray19, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_28.key2(byteArray38, 0);
        byte[] byteArray43 = null;
        staticSaltsABMC1_28.key2(byteArray43, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray54, 10);
        staticSaltsABMC1_46.key2(byteArray54, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_67.key2(byteArray78, (int) (short) 10);
        staticSaltsABMC1_59.key2(byteArray78, (int) 'a');
        staticSaltsABMC1_46.key2(byteArray78, 1);
        staticSaltsABMC1_28.key2(byteArray78, 0);
        staticSaltsABMC1_0.key2(byteArray78, (int) ' ');
        byte[] byteArray89 = null;
        staticSaltsABMC1_0.key2(byteArray89, (int) ' ');
        byte[] byteArray92 = null;
        staticSaltsABMC1_0.key2(byteArray92, (int) (byte) -1);
        byte[] byteArray95 = null;
        staticSaltsABMC1_0.key2(byteArray95, (int) (byte) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABMC1_0.key2(byteArray5, 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_12.key2(byteArray23, (int) (short) 10);
        staticSaltsABMC1_11.key2(byteArray23, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_44.key2(byteArray55, (int) (short) 10);
        staticSaltsABMC1_36.key2(byteArray55, (int) 'a');
        staticSaltsABMC1_28.key2(byteArray55, 100);
        staticSaltsABMC1_11.key2(byteArray55, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_11.key2(byteArray66, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray66, (int) (byte) -1);
        byte[] byteArray73 = null;
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray59, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_65.key2(byteArray75, 0);
        staticSaltsABMC1_64.key2(byteArray75, (int) (byte) 1);
        staticSaltsABMC1_40.key2(byteArray75, 1);
        staticSaltsABMC1_0.key2(byteArray75, (int) (short) 1);
        byte[] byteArray86 = null;
        staticSaltsABMC1_0.key2(byteArray86, (int) (short) -1);
        byte[] byteArray89 = null;
        staticSaltsABMC1_0.key2(byteArray89, (int) (short) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_5.key2(byteArray15, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_20.key2(byteArray30, 0);
        staticSaltsABMC1_5.key2(byteArray30, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_5.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray40, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) -1);
        byte[] byteArray59 = null;
        staticSaltsABMC1_0.key2(byteArray59, (int) (short) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray21 = null;
        staticSaltsABMC1_13.key2(byteArray21, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray32, 10);
        staticSaltsABMC1_24.key2(byteArray32, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_37.key2(byteArray56, (int) 'a');
        staticSaltsABMC1_24.key2(byteArray56, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_24.key2(byteArray65, 0);
        staticSaltsABMC1_13.key2(byteArray65, 0);
        staticSaltsABMC1_0.key2(byteArray65, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_0.key2(byteArray76, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray83, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_81.key2(byteArray88, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray88, (int) (byte) 10);
        java.lang.Class<?> wildcardClass95 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray58, (int) (byte) 100);
        byte[] byteArray65 = null;
        staticSaltsABMC1_0.key2(byteArray65, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_69.key2(byteArray80, (int) (short) 10);
        staticSaltsABMC1_68.key2(byteArray80, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray80, (int) (short) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_5.key2(byteArray15, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_20.key2(byteArray30, 0);
        staticSaltsABMC1_5.key2(byteArray30, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_5.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray40, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray52, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_49.key2(byteArray57, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray57, (int) (byte) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABMC1_7.key2(byteArray9, (int) '#');
        staticSaltsABMC1_6.key2(byteArray9, (int) (short) 0);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_6.key2(byteArray17, (int) (short) 10);
        staticSaltsABMC1_1.key2(byteArray17, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray30, 10);
        staticSaltsABMC1_22.key2(byteArray30, 10);
        staticSaltsABMC1_1.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_37.key2(byteArray56, (int) 'a');
        staticSaltsABMC1_1.key2(byteArray56, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_63.key2(byteArray73, 0);
        staticSaltsABMC1_1.key2(byteArray73, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray73, 100);
        byte[] byteArray82 = null;
        staticSaltsABMC1_0.key2(byteArray82, (int) 'a');
        java.lang.Class<?> wildcardClass85 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_43.key2(byteArray54, (int) (short) 10);
        staticSaltsABMC1_42.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray67, 10);
        staticSaltsABMC1_59.key2(byteArray67, 10);
        staticSaltsABMC1_42.key2(byteArray67, (int) '4');
        staticSaltsABMC1_0.key2(byteArray67, (int) (short) 0);
        byte[] byteArray76 = null;
        staticSaltsABMC1_0.key2(byteArray76, (int) '4');
        byte[] byteArray79 = null;
        staticSaltsABMC1_0.key2(byteArray79, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticSaltsABMC1_87.key2(byteArray89, (int) '#');
        staticSaltsABMC1_82.key2(byteArray89, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray89, (int) (byte) -1);
        java.lang.Class<?> wildcardClass96 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray26, 10);
        staticSaltsABMC1_18.key2(byteArray26, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray50, (int) 'a');
        staticSaltsABMC1_18.key2(byteArray50, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_18.key2(byteArray59, 0);
        byte[] byteArray64 = null;
        staticSaltsABMC1_18.key2(byteArray64, (int) (byte) -1);
        byte[] byteArray67 = null;
        staticSaltsABMC1_18.key2(byteArray67, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_18.key2(byteArray72, (-1));
        staticSaltsABMC1_0.key2(byteArray72, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray87, 10);
        staticSaltsABMC1_79.key2(byteArray87, 10);
        staticSaltsABMC1_0.key2(byteArray87, 0);
        java.lang.Class<?> wildcardClass94 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_0.key2(byteArray15, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_18.key2(byteArray25, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_30.key2(byteArray42, (int) (short) 0);
        staticSaltsABMC1_18.key2(byteArray42, 0);
        staticSaltsABMC1_0.key2(byteArray42, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray59, 10);
        staticSaltsABMC1_51.key2(byteArray59, 10);
        byte[] byteArray64 = null;
        staticSaltsABMC1_51.key2(byteArray64, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_68.key2(byteArray78, 0);
        staticSaltsABMC1_67.key2(byteArray78, (int) (byte) 1);
        staticSaltsABMC1_51.key2(byteArray78, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray78, (int) ' ');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) 100);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_41.key2(byteArray51, 0);
        staticSaltsABMC1_33.key2(byteArray51, 100);
        byte[] byteArray58 = new byte[] {};
        staticSaltsABMC1_33.key2(byteArray58, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray58, (int) (short) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray50, 10);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) -1);
        byte[] byteArray55 = null;
        staticSaltsABMC1_0.key2(byteArray55, (int) '#');
        byte[] byteArray58 = null;
        staticSaltsABMC1_0.key2(byteArray58, (int) (short) 0);
        byte[] byteArray61 = null;
        staticSaltsABMC1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABMC1_0.key2(byteArray64, 0);
        java.lang.Class<?> wildcardClass67 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        byte[] byteArray12 = null;
        staticSaltsABMC1_0.key2(byteArray12, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray24, 10);
        staticSaltsABMC1_16.key2(byteArray24, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABMC1_29.key2(byteArray48, (int) 'a');
        staticSaltsABMC1_16.key2(byteArray48, 1);
        staticSaltsABMC1_15.key2(byteArray48, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_58.key2(byteArray68, 0);
        staticSaltsABMC1_57.key2(byteArray68, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_76.key2(byteArray86, 0);
        staticSaltsABMC1_75.key2(byteArray86, (int) (byte) 1);
        staticSaltsABMC1_57.key2(byteArray86, (int) (byte) 0);
        staticSaltsABMC1_15.key2(byteArray86, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray86, (int) '#');
        java.lang.Class<?> wildcardClass99 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        byte[] byteArray12 = null;
        staticSaltsABMC1_0.key2(byteArray12, (int) (byte) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_17.key2(byteArray28, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray28, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray44, (-1));
        byte[] byteArray51 = null;
        staticSaltsABMC1_0.key2(byteArray51, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_54.key2(byteArray65, (int) (short) 10);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_54.key2(byteArray74, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray74, (int) '#');
        java.lang.Class<?> wildcardClass79 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray30, 10);
        staticSaltsABMC1_22.key2(byteArray30, 10);
        staticSaltsABMC1_8.key2(byteArray30, (int) (short) 10);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_8.key2(byteArray41, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray57, 10);
        staticSaltsABMC1_49.key2(byteArray57, 10);
        staticSaltsABMC1_0.key2(byteArray57, (int) ' ');
        java.lang.Class<?> wildcardClass64 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (-1));
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray70, 10);
        staticSaltsABMC1_62.key2(byteArray70, 10);
        staticSaltsABMC1_48.key2(byteArray70, (int) (short) 10);
        byte[] byteArray81 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_48.key2(byteArray81, (int) (short) 0);
        staticSaltsABMC1_40.key2(byteArray81, 0);
        staticSaltsABMC1_0.key2(byteArray81, (int) (short) 10);
        java.lang.Class<?> wildcardClass88 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_9.key2(byteArray19, 0);
        staticSaltsABMC1_8.key2(byteArray19, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray19, 0);
        byte[] byteArray28 = null;
        staticSaltsABMC1_0.key2(byteArray28, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABMC1_36.key2(byteArray52, (int) (byte) 0);
        staticSaltsABMC1_31.key2(byteArray52, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray52, (int) (byte) 0);
        java.lang.Class<?> wildcardClass61 = byteArray52.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABMC1_0.key2(byteArray38, 100);
        byte[] byteArray41 = null;
        staticSaltsABMC1_0.key2(byteArray41, (int) (byte) 1);
        byte[] byteArray44 = null;
        staticSaltsABMC1_0.key2(byteArray44, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_60.key2(byteArray67, (int) (byte) 10);
        staticSaltsABMC1_52.key2(byteArray67, (int) '4');
        staticSaltsABMC1_47.key2(byteArray67, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray67, 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, 0);
        byte[] byteArray55 = null;
        staticSaltsABMC1_0.key2(byteArray55, 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_34.key2(byteArray44, 0);
        staticSaltsABMC1_19.key2(byteArray44, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        staticSaltsABMC1_19.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray64, 10);
        staticSaltsABMC1_19.key2(byteArray64, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray64, (int) 'a');
        java.lang.Class<?> wildcardClass71 = byteArray64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_31.key2(byteArray41, 0);
        staticSaltsABMC1_30.key2(byteArray41, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_48.key2(byteArray59, (int) (byte) 1);
        staticSaltsABMC1_30.key2(byteArray59, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray59, (int) '#');
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, (int) 'a');
        java.lang.Class<?> wildcardClass73 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_8.key2(byteArray15, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray15, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_22.key2(byteArray29, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        staticSaltsABMC1_34.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_52.key2(byteArray63, (int) (byte) 1);
        staticSaltsABMC1_34.key2(byteArray63, (int) (byte) 0);
        staticSaltsABMC1_22.key2(byteArray63, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray63, (int) ' ');
        byte[] byteArray76 = null;
        staticSaltsABMC1_0.key2(byteArray76, (int) (byte) -1);
        byte[] byteArray79 = null;
        staticSaltsABMC1_0.key2(byteArray79, (-1));
        java.lang.Class<?> wildcardClass82 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray48, 10);
        staticSaltsABMC1_40.key2(byteArray48, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_61.key2(byteArray72, (int) (short) 10);
        staticSaltsABMC1_53.key2(byteArray72, (int) 'a');
        staticSaltsABMC1_40.key2(byteArray72, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_40.key2(byteArray81, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_40.key2(byteArray88, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray88, (int) ' ');
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray37, (int) ' ');
        byte[] byteArray44 = null;
        staticSaltsABMC1_0.key2(byteArray44, (int) '4');
        java.lang.Class<?> wildcardClass47 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_47.key2(byteArray54, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_60.key2(byteArray71, (int) (short) 10);
        staticSaltsABMC1_59.key2(byteArray71, (int) (short) 0);
        staticSaltsABMC1_47.key2(byteArray71, 0);
        byte[] byteArray78 = null;
        staticSaltsABMC1_47.key2(byteArray78, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_81.key2(byteArray84, (int) (short) 0);
        staticSaltsABMC1_47.key2(byteArray84, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray84, (int) (byte) 10);
        java.lang.Class<?> wildcardClass93 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray25 = null;
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_28.key2(byteArray35, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_40.key2(byteArray50, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_55.key2(byteArray65, 0);
        staticSaltsABMC1_40.key2(byteArray65, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        staticSaltsABMC1_40.key2(byteArray75, (int) (short) 0);
        staticSaltsABMC1_28.key2(byteArray75, 10);
        staticSaltsABMC1_0.key2(byteArray75, (int) '4');
        byte[] byteArray86 = null;
        staticSaltsABMC1_0.key2(byteArray86, (int) (short) 1);
        byte[] byteArray89 = null;
        staticSaltsABMC1_0.key2(byteArray89, (int) ' ');
        byte[] byteArray92 = null;
        staticSaltsABMC1_0.key2(byteArray92, (int) '#');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_0.key2(byteArray15, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray21, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray32, 10);
        staticSaltsABMC1_24.key2(byteArray32, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_37.key2(byteArray56, (int) 'a');
        staticSaltsABMC1_24.key2(byteArray56, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_24.key2(byteArray65, 0);
        staticSaltsABMC1_18.key2(byteArray65, 10);
        staticSaltsABMC1_0.key2(byteArray65, (int) ' ');
        byte[] byteArray74 = null;
        staticSaltsABMC1_0.key2(byteArray74, (int) (byte) 10);
        byte[] byteArray77 = null;
        staticSaltsABMC1_0.key2(byteArray77, 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_15.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        staticSaltsABMC1_15.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray60, 10);
        staticSaltsABMC1_15.key2(byteArray60, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray60, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_67.key2(byteArray73, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_78.key2(byteArray88, 0);
        staticSaltsABMC1_0.key2(byteArray88, (int) 'a');
        byte[] byteArray95 = null;
        staticSaltsABMC1_0.key2(byteArray95, (int) 'a');
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray35, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_40.key2(byteArray51, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_54.key2(byteArray65, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray65, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray65, (int) (byte) 10);
        byte[] byteArray72 = null;
        staticSaltsABMC1_0.key2(byteArray72, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_75.key2(byteArray78, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_88 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticSaltsABMC1_88.key2(byteArray90, (int) '#');
        staticSaltsABMC1_83.key2(byteArray90, (int) (byte) 10);
        staticSaltsABMC1_75.key2(byteArray90, (int) '4');
        staticSaltsABMC1_0.key2(byteArray90, (int) (byte) -1);
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_32.key2(byteArray42, 0);
        staticSaltsABMC1_31.key2(byteArray42, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_50.key2(byteArray60, 0);
        staticSaltsABMC1_49.key2(byteArray60, (int) (byte) 1);
        staticSaltsABMC1_31.key2(byteArray60, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_70.key2(byteArray81, (int) (short) 10);
        staticSaltsABMC1_69.key2(byteArray81, (int) (short) 0);
        staticSaltsABMC1_31.key2(byteArray81, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray81, (int) (short) 100);
        byte[] byteArray90 = null;
        staticSaltsABMC1_0.key2(byteArray90, (int) (byte) -1);
        byte[] byteArray93 = null;
        staticSaltsABMC1_0.key2(byteArray93, (int) (byte) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_34.key2(byteArray50, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_57.key2(byteArray74, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray82, 10);
        staticSaltsABMC1_57.key2(byteArray82, (int) (short) 100);
        staticSaltsABMC1_0.key2(byteArray82, (-1));
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABMC1_0.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray49 = null;
        staticSaltsABMC1_41.key2(byteArray49, (int) (short) 100);
        byte[] byteArray52 = null;
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray71, 10);
        staticSaltsABMC1_63.key2(byteArray71, 10);
        staticSaltsABMC1_55.key2(byteArray71, (int) (short) 1);
        staticSaltsABMC1_41.key2(byteArray71, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray71, (int) (short) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        staticSaltsABMC1_17.key2(byteArray25, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_38.key2(byteArray49, (int) (short) 10);
        staticSaltsABMC1_30.key2(byteArray49, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray49, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_17.key2(byteArray58, 0);
        staticSaltsABMC1_0.key2(byteArray58, (int) '#');
        byte[] byteArray65 = null;
        staticSaltsABMC1_0.key2(byteArray65, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray84, 10);
        staticSaltsABMC1_76.key2(byteArray84, 10);
        staticSaltsABMC1_68.key2(byteArray84, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray84, (int) (short) 10);
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_32.key2(byteArray43, (int) (short) 10);
        byte[] byteArray46 = null;
        staticSaltsABMC1_32.key2(byteArray46, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_32.key2(byteArray59, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_66.key2(byteArray72, (int) (short) 0);
        staticSaltsABMC1_32.key2(byteArray72, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray72, 100);
        java.lang.Class<?> wildcardClass79 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        byte[] byteArray12 = null;
        staticSaltsABMC1_0.key2(byteArray12, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray23, 10);
        staticSaltsABMC1_15.key2(byteArray23, 10);
        byte[] byteArray28 = null;
        staticSaltsABMC1_15.key2(byteArray28, (int) (byte) 10);
        byte[] byteArray31 = null;
        staticSaltsABMC1_15.key2(byteArray31, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray37, 10);
        staticSaltsABMC1_15.key2(byteArray37, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray37, 1);
        java.lang.Class<?> wildcardClass44 = byteArray37.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        staticSaltsABMC1_21.key2(byteArray29, 10);
        staticSaltsABMC1_0.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_36.key2(byteArray47, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_36.key2(byteArray61, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_74.key2(byteArray84, 0);
        staticSaltsABMC1_66.key2(byteArray84, 100);
        staticSaltsABMC1_36.key2(byteArray84, 1);
        staticSaltsABMC1_0.key2(byteArray84, (int) (byte) -1);
        java.lang.Class<?> wildcardClass95 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_11.key2(byteArray14, 10);
        staticSaltsABMC1_6.key2(byteArray14, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_27.key2(byteArray38, (int) (short) 10);
        staticSaltsABMC1_19.key2(byteArray38, (int) 'a');
        staticSaltsABMC1_6.key2(byteArray38, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_6.key2(byteArray47, 0);
        staticSaltsABMC1_0.key2(byteArray47, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_62.key2(byteArray72, 0);
        staticSaltsABMC1_54.key2(byteArray72, 100);
        staticSaltsABMC1_0.key2(byteArray72, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_81.key2(byteArray84, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray84, 10);
        java.lang.Class<?> wildcardClass91 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_7.key2(byteArray10, (int) (short) 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_7.key2(byteArray15, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_26.key2(byteArray29, (int) (short) 0);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_26.key2(byteArray37, (int) (short) 10);
        staticSaltsABMC1_18.key2(byteArray37, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_42.key2(byteArray53, (int) (short) 10);
        staticSaltsABMC1_18.key2(byteArray53, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_58.key2(byteArray74, (int) (byte) 0);
        staticSaltsABMC1_18.key2(byteArray74, 0);
        staticSaltsABMC1_7.key2(byteArray74, 0);
        staticSaltsABMC1_6.key2(byteArray74, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray74, (int) (short) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_21.key2(byteArray40, (int) 'a');
        staticSaltsABMC1_13.key2(byteArray40, 100);
        byte[] byteArray47 = null;
        staticSaltsABMC1_13.key2(byteArray47, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_50.key2(byteArray57, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_62.key2(byteArray74, (int) (short) 0);
        staticSaltsABMC1_50.key2(byteArray74, 0);
        staticSaltsABMC1_13.key2(byteArray74, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray74, (-1));
        java.lang.Class<?> wildcardClass85 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray33, 10);
        staticSaltsABMC1_25.key2(byteArray33, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray57, (int) 'a');
        staticSaltsABMC1_25.key2(byteArray57, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_25.key2(byteArray66, 0);
        byte[] byteArray71 = null;
        staticSaltsABMC1_25.key2(byteArray71, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_79.key2(byteArray82, (int) (short) 0);
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_79.key2(byteArray90, (int) (short) 10);
        staticSaltsABMC1_74.key2(byteArray90, (int) (byte) 0);
        staticSaltsABMC1_25.key2(byteArray90, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray90, (-1));
        java.lang.Class<?> wildcardClass99 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_13.key2(byteArray23, 0);
        staticSaltsABMC1_12.key2(byteArray23, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_31.key2(byteArray41, 0);
        staticSaltsABMC1_30.key2(byteArray41, (int) (byte) 1);
        staticSaltsABMC1_12.key2(byteArray41, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray41, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_52.key2(byteArray69, (-1));
        byte[] byteArray79 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_52.key2(byteArray79, 10);
        staticSaltsABMC1_0.key2(byteArray79, (int) (short) 100);
        byte[] byteArray84 = null;
        staticSaltsABMC1_0.key2(byteArray84, 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray27, 10);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_33.key2(byteArray43, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_33.key2(byteArray50, (-1));
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_33.key2(byteArray60, 10);
        staticSaltsABMC1_0.key2(byteArray60, (int) (short) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_12.key2(byteArray23, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray34, 10);
        staticSaltsABMC1_26.key2(byteArray34, 10);
        staticSaltsABMC1_12.key2(byteArray34, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray34, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        staticSaltsABMC1_43.key2(byteArray61, 100);
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_43.key2(byteArray74, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray74, (-1));
        byte[] byteArray79 = null;
        staticSaltsABMC1_0.key2(byteArray79, (int) (byte) 0);
        java.lang.Class<?> wildcardClass82 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticSaltsABMC1_11.key2(byteArray13, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray19, 10);
        staticSaltsABMC1_11.key2(byteArray19, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_32.key2(byteArray43, (int) (short) 10);
        staticSaltsABMC1_24.key2(byteArray43, (int) 'a');
        staticSaltsABMC1_11.key2(byteArray43, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_11.key2(byteArray52, 0);
        staticSaltsABMC1_0.key2(byteArray52, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray62, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_0.key2(byteArray71, 100);
        java.lang.Class<?> wildcardClass76 = byteArray71.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        staticSaltsABMC1_15.key2(byteArray42, 100);
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_51.key2(byteArray62, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray62, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_71.key2(byteArray77, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray77, (int) (byte) 10);
        java.lang.Class<?> wildcardClass82 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        byte[] byteArray12 = null;
        staticSaltsABMC1_0.key2(byteArray12, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_20.key2(byteArray31, (int) (short) 10);
        staticSaltsABMC1_15.key2(byteArray31, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_52.key2(byteArray63, (int) (short) 10);
        staticSaltsABMC1_44.key2(byteArray63, (int) 'a');
        staticSaltsABMC1_36.key2(byteArray63, 100);
        staticSaltsABMC1_15.key2(byteArray63, 0);
        staticSaltsABMC1_0.key2(byteArray63, 10);
        java.lang.Class<?> wildcardClass74 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_34.key2(byteArray44, 0);
        staticSaltsABMC1_19.key2(byteArray44, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        staticSaltsABMC1_19.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray64, 10);
        staticSaltsABMC1_19.key2(byteArray64, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray64, (int) 'a');
        java.lang.Class<?> wildcardClass71 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABMC1_51.key2(byteArray67, (int) (byte) 0);
        staticSaltsABMC1_17.key2(byteArray67, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray67, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray87, (int) '#');
        staticSaltsABMC1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABMC1_76.key2(byteArray87, 1);
        staticSaltsABMC1_0.key2(byteArray87, (int) (byte) 1);
        byte[] byteArray96 = null;
        staticSaltsABMC1_0.key2(byteArray96, 1);
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray52, (int) 'a');
        staticSaltsABMC1_25.key2(byteArray52, 100);
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_69.key2(byteArray79, 0);
        staticSaltsABMC1_61.key2(byteArray79, 100);
        staticSaltsABMC1_0.key2(byteArray79, (int) (short) -1);
        java.lang.Class<?> wildcardClass88 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray57, (int) 'a');
        staticSaltsABMC1_30.key2(byteArray57, 100);
        staticSaltsABMC1_15.key2(byteArray57, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray57, 100);
        byte[] byteArray68 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray68, (-1));
        byte[] byteArray71 = null;
        staticSaltsABMC1_0.key2(byteArray71, (int) (short) 100);
        byte[] byteArray74 = null;
        staticSaltsABMC1_0.key2(byteArray74, (int) (byte) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        staticSaltsABMC1_15.key2(byteArray42, 100);
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_51.key2(byteArray62, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray62, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_71.key2(byteArray77, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray77, (int) (byte) 10);
        java.lang.Class<?> wildcardClass82 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray22, 10);
        staticSaltsABMC1_14.key2(byteArray22, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_35.key2(byteArray46, (int) (short) 10);
        staticSaltsABMC1_27.key2(byteArray46, (int) 'a');
        staticSaltsABMC1_14.key2(byteArray46, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        byte[] byteArray61 = null;
        staticSaltsABMC1_53.key2(byteArray61, (int) (short) 100);
        byte[] byteArray64 = null;
        staticSaltsABMC1_53.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray83, 10);
        staticSaltsABMC1_75.key2(byteArray83, 10);
        staticSaltsABMC1_67.key2(byteArray83, (int) (short) 1);
        staticSaltsABMC1_53.key2(byteArray83, (int) 'a');
        staticSaltsABMC1_14.key2(byteArray83, 1);
        staticSaltsABMC1_13.key2(byteArray83, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray83, (int) (short) -1);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray50, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) 1);
        byte[] byteArray57 = null;
        staticSaltsABMC1_0.key2(byteArray57, (int) ' ');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_25.key2(byteArray36, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        staticSaltsABMC1_39.key2(byteArray57, 100);
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_39.key2(byteArray70, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_73.key2(byteArray80, (int) (byte) 10);
        staticSaltsABMC1_39.key2(byteArray80, (int) (short) -1);
        staticSaltsABMC1_25.key2(byteArray80, 0);
        staticSaltsABMC1_0.key2(byteArray80, (int) 'a');
        byte[] byteArray91 = null;
        staticSaltsABMC1_0.key2(byteArray91, (int) (short) 0);
        byte[] byteArray94 = null;
        staticSaltsABMC1_0.key2(byteArray94, (int) (short) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticSaltsABMC1_11.key2(byteArray13, (int) '#');
        staticSaltsABMC1_6.key2(byteArray13, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABMC1_18.key2(byteArray30, (int) (short) 0);
        staticSaltsABMC1_6.key2(byteArray30, 0);
        byte[] byteArray37 = null;
        staticSaltsABMC1_6.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_41.key2(byteArray51, 0);
        staticSaltsABMC1_40.key2(byteArray51, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_59.key2(byteArray69, 0);
        staticSaltsABMC1_58.key2(byteArray69, (int) (byte) 1);
        staticSaltsABMC1_40.key2(byteArray69, (int) (byte) 0);
        staticSaltsABMC1_6.key2(byteArray69, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray69, 0);
        byte[] byteArray82 = null;
        staticSaltsABMC1_0.key2(byteArray82, 0);
        byte[] byteArray85 = null;
        staticSaltsABMC1_0.key2(byteArray85, 100);
        byte[] byteArray88 = null;
        staticSaltsABMC1_0.key2(byteArray88, (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_28.key2(byteArray38, 0);
        staticSaltsABMC1_27.key2(byteArray38, (int) (byte) 1);
        staticSaltsABMC1_19.key2(byteArray38, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray56, 10);
        staticSaltsABMC1_48.key2(byteArray56, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_69.key2(byteArray80, (int) (short) 10);
        staticSaltsABMC1_61.key2(byteArray80, (int) 'a');
        staticSaltsABMC1_48.key2(byteArray80, 1);
        staticSaltsABMC1_47.key2(byteArray80, (int) (byte) 100);
        staticSaltsABMC1_19.key2(byteArray80, 1);
        staticSaltsABMC1_0.key2(byteArray80, 1);
        byte[] byteArray93 = null;
        staticSaltsABMC1_0.key2(byteArray93, (int) (short) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_53.key2(byteArray64, (int) (short) 10);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_53.key2(byteArray73, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 0);
        java.lang.Class<?> wildcardClass78 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (byte) 100);
        byte[] byteArray40 = null;
        staticSaltsABMC1_0.key2(byteArray40, (-1));
        byte[] byteArray43 = null;
        staticSaltsABMC1_0.key2(byteArray43, (int) (byte) 100);
        java.lang.Class<?> wildcardClass46 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray30, 10);
        staticSaltsABMC1_22.key2(byteArray30, 10);
        staticSaltsABMC1_8.key2(byteArray30, (int) (short) 10);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_8.key2(byteArray41, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray41, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_54.key2(byteArray64, 0);
        staticSaltsABMC1_46.key2(byteArray64, 100);
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray81, 10);
        staticSaltsABMC1_73.key2(byteArray81, 10);
        staticSaltsABMC1_0.key2(byteArray81, (int) (short) -1);
        java.lang.Class<?> wildcardClass88 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_47.key2(byteArray64, (-1));
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 100);
        byte[] byteArray78 = null;
        staticSaltsABMC1_0.key2(byteArray78, 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABMC1_14.key2(byteArray30, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_43.key2(byteArray53, 0);
        staticSaltsABMC1_35.key2(byteArray53, 100);
        staticSaltsABMC1_14.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_70.key2(byteArray80, 0);
        staticSaltsABMC1_62.key2(byteArray80, 100);
        staticSaltsABMC1_14.key2(byteArray80, (-1));
        staticSaltsABMC1_0.key2(byteArray80, 10);
        byte[] byteArray91 = null;
        staticSaltsABMC1_0.key2(byteArray91, 0);
        byte[] byteArray94 = null;
        staticSaltsABMC1_0.key2(byteArray94, (int) (byte) -1);
        byte[] byteArray97 = null;
        staticSaltsABMC1_0.key2(byteArray97, 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_12.key2(byteArray22, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_27.key2(byteArray37, 0);
        staticSaltsABMC1_12.key2(byteArray37, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_60.key2(byteArray71, (int) (short) 10);
        staticSaltsABMC1_52.key2(byteArray71, (int) 'a');
        staticSaltsABMC1_44.key2(byteArray71, 100);
        staticSaltsABMC1_12.key2(byteArray71, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray71, (int) '#');
        byte[] byteArray82 = null;
        staticSaltsABMC1_0.key2(byteArray82, (int) (byte) 10);
        byte[] byteArray85 = null;
        staticSaltsABMC1_0.key2(byteArray85, 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_46.key2(byteArray56, 0);
        staticSaltsABMC1_38.key2(byteArray56, 100);
        byte[] byteArray69 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_38.key2(byteArray69, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_72.key2(byteArray79, (int) (byte) 10);
        staticSaltsABMC1_38.key2(byteArray79, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray79, (int) (byte) 0);
        byte[] byteArray88 = null;
        staticSaltsABMC1_0.key2(byteArray88, (int) (byte) 1);
        java.lang.Class<?> wildcardClass91 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        staticSaltsABMC1_17.key2(byteArray25, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_38.key2(byteArray49, (int) (short) 10);
        staticSaltsABMC1_30.key2(byteArray49, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray49, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_17.key2(byteArray58, 0);
        byte[] byteArray63 = null;
        staticSaltsABMC1_17.key2(byteArray63, (int) (byte) -1);
        byte[] byteArray66 = null;
        staticSaltsABMC1_17.key2(byteArray66, (int) (byte) 1);
        byte[] byteArray69 = null;
        staticSaltsABMC1_17.key2(byteArray69, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_72.key2(byteArray79, (int) (byte) 10);
        staticSaltsABMC1_17.key2(byteArray79, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray79, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_88 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_88.key2(byteArray91, 10);
        staticSaltsABMC1_0.key2(byteArray91, (int) (short) 10);
        java.lang.Class<?> wildcardClass96 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABMC1_29.key2(byteArray48, (int) 'a');
        staticSaltsABMC1_21.key2(byteArray48, 100);
        staticSaltsABMC1_0.key2(byteArray48, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_65.key2(byteArray75, 0);
        staticSaltsABMC1_57.key2(byteArray75, 100);
        staticSaltsABMC1_0.key2(byteArray75, (int) (byte) 0);
        byte[] byteArray84 = null;
        staticSaltsABMC1_0.key2(byteArray84, (int) 'a');
        java.lang.Class<?> wildcardClass87 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_17.key2(byteArray28, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray28, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray44, (-1));
        byte[] byteArray51 = null;
        staticSaltsABMC1_0.key2(byteArray51, 100);
        byte[] byteArray54 = null;
        staticSaltsABMC1_0.key2(byteArray54, (int) '4');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_17.key2(byteArray24, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABMC1_29.key2(byteArray41, (int) (short) 0);
        staticSaltsABMC1_17.key2(byteArray41, 0);
        byte[] byteArray48 = null;
        staticSaltsABMC1_17.key2(byteArray48, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        staticSaltsABMC1_17.key2(byteArray54, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray54, (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_55.key2(byteArray66, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_69.key2(byteArray80, (int) (short) 10);
        staticSaltsABMC1_55.key2(byteArray80, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray80, 0);
        byte[] byteArray87 = null;
        staticSaltsABMC1_0.key2(byteArray87, (int) (byte) 10);
        java.lang.Class<?> wildcardClass90 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_0.key2(byteArray63, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray73, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_70.key2(byteArray78, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray78, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray91 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_85.key2(byteArray91, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray91, (int) ' ');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_53.key2(byteArray64, (int) (short) 10);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_53.key2(byteArray73, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 0);
        byte[] byteArray78 = null;
        staticSaltsABMC1_0.key2(byteArray78, 0);
        java.lang.Class<?> wildcardClass81 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABMC1_0.key2(byteArray5, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABMC1_16.key2(byteArray35, (int) 'a');
        staticSaltsABMC1_8.key2(byteArray35, 100);
        byte[] byteArray42 = null;
        staticSaltsABMC1_8.key2(byteArray42, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_45.key2(byteArray52, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_58.key2(byteArray69, (int) (short) 10);
        staticSaltsABMC1_57.key2(byteArray69, (int) (short) 0);
        staticSaltsABMC1_45.key2(byteArray69, 0);
        staticSaltsABMC1_8.key2(byteArray69, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray69, (int) (short) 100);
        byte[] byteArray80 = null;
        staticSaltsABMC1_0.key2(byteArray80, (int) ' ');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_21.key2(byteArray39, 100);
        staticSaltsABMC1_0.key2(byteArray39, (int) (short) 0);
        byte[] byteArray48 = null;
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) -1);
        byte[] byteArray51 = null;
        staticSaltsABMC1_0.key2(byteArray51, (int) (short) -1);
        byte[] byteArray54 = null;
        staticSaltsABMC1_0.key2(byteArray54, (int) (short) -1);
        java.lang.Class<?> wildcardClass57 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_21.key2(byteArray38, (-1));
        staticSaltsABMC1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        staticSaltsABMC1_45.key2(byteArray56, 1);
        staticSaltsABMC1_0.key2(byteArray56, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray68, 10);
        staticSaltsABMC1_0.key2(byteArray68, (int) '#');
        byte[] byteArray73 = null;
        staticSaltsABMC1_0.key2(byteArray73, (int) (byte) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        staticSaltsABMC1_21.key2(byteArray29, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_42.key2(byteArray53, (int) (short) 10);
        staticSaltsABMC1_34.key2(byteArray53, (int) 'a');
        staticSaltsABMC1_21.key2(byteArray53, 1);
        staticSaltsABMC1_0.key2(byteArray53, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_62.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray87, 10);
        staticSaltsABMC1_79.key2(byteArray87, 10);
        staticSaltsABMC1_62.key2(byteArray87, (int) '4');
        staticSaltsABMC1_0.key2(byteArray87, (int) ' ');
        java.lang.Class<?> wildcardClass96 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, 1);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        byte[] byteArray24 = null;
        staticSaltsABMC1_19.key2(byteArray24, 0);
        byte[] byteArray27 = null;
        staticSaltsABMC1_19.key2(byteArray27, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_30.key2(byteArray42, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_55.key2(byteArray74, (int) 'a');
        staticSaltsABMC1_47.key2(byteArray74, 100);
        staticSaltsABMC1_30.key2(byteArray74, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_30.key2(byteArray85, (int) (byte) 10);
        staticSaltsABMC1_19.key2(byteArray85, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray85, (int) (short) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_0.key2(byteArray63, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_78.key2(byteArray88, 0);
        staticSaltsABMC1_70.key2(byteArray88, 100);
        staticSaltsABMC1_0.key2(byteArray88, 0);
        byte[] byteArray97 = null;
        staticSaltsABMC1_0.key2(byteArray97, (int) (byte) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_40.key2(byteArray51, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray62, 10);
        staticSaltsABMC1_54.key2(byteArray62, 10);
        staticSaltsABMC1_40.key2(byteArray62, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray62, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_71.key2(byteArray81, 0);
        staticSaltsABMC1_0.key2(byteArray81, (int) '#');
        java.lang.Class<?> wildcardClass88 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABMC1_14.key2(byteArray39, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_14.key2(byteArray46, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_53.key2(byteArray60, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray60, 0);
        java.lang.Class<?> wildcardClass67 = byteArray60.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_34.key2(byteArray44, 0);
        staticSaltsABMC1_19.key2(byteArray44, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        staticSaltsABMC1_19.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_61.key2(byteArray72, (int) (short) 10);
        staticSaltsABMC1_19.key2(byteArray72, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray72, (int) 'a');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_37.key2(byteArray56, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray56, (int) '4');
        byte[] byteArray63 = null;
        staticSaltsABMC1_0.key2(byteArray63, (int) '#');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray26, 10);
        staticSaltsABMC1_18.key2(byteArray26, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray50, (int) 'a');
        staticSaltsABMC1_18.key2(byteArray50, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_18.key2(byteArray59, 0);
        byte[] byteArray64 = null;
        staticSaltsABMC1_18.key2(byteArray64, (int) (byte) -1);
        byte[] byteArray67 = null;
        staticSaltsABMC1_18.key2(byteArray67, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_18.key2(byteArray72, (-1));
        staticSaltsABMC1_0.key2(byteArray72, (int) ' ');
        byte[] byteArray79 = null;
        staticSaltsABMC1_0.key2(byteArray79, 0);
        java.lang.Class<?> wildcardClass82 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABMC1_0.key2(byteArray38, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_49.key2(byteArray60, (int) (short) 10);
        staticSaltsABMC1_41.key2(byteArray60, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_65.key2(byteArray76, (int) (short) 10);
        staticSaltsABMC1_41.key2(byteArray76, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray76, (int) (byte) 10);
        java.lang.Class<?> wildcardClass83 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        staticSaltsABMC1_1.key2(byteArray12, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_25.key2(byteArray35, 0);
        staticSaltsABMC1_24.key2(byteArray35, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_43.key2(byteArray53, 0);
        staticSaltsABMC1_42.key2(byteArray53, (int) (byte) 1);
        staticSaltsABMC1_24.key2(byteArray53, (int) (byte) 0);
        staticSaltsABMC1_19.key2(byteArray53, (-1));
        staticSaltsABMC1_1.key2(byteArray53, (int) '4');
        staticSaltsABMC1_0.key2(byteArray53, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_68.key2(byteArray75, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray75, 0);
        byte[] byteArray82 = null;
        staticSaltsABMC1_0.key2(byteArray82, (int) (byte) 1);
        java.lang.Class<?> wildcardClass85 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray22, 10);
        staticSaltsABMC1_14.key2(byteArray22, 10);
        byte[] byteArray27 = null;
        staticSaltsABMC1_14.key2(byteArray27, (int) (byte) 10);
        byte[] byteArray30 = null;
        staticSaltsABMC1_14.key2(byteArray30, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_38.key2(byteArray49, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray49, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray57, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_54.key2(byteArray62, (int) (short) 1);
        staticSaltsABMC1_33.key2(byteArray62, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_69.key2(byteArray80, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray80, (int) (byte) 100);
        staticSaltsABMC1_14.key2(byteArray80, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray80, (int) (byte) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray59, (int) 'a');
        staticSaltsABMC1_32.key2(byteArray59, 100);
        staticSaltsABMC1_0.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_0.key2(byteArray70, (int) (byte) -1);
        byte[] byteArray75 = null;
        staticSaltsABMC1_0.key2(byteArray75, (int) (byte) 0);
        java.lang.Class<?> wildcardClass78 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_0.key2(byteArray15, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_26.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_26.key2(byteArray36, 0);
        staticSaltsABMC1_18.key2(byteArray36, 100);
        byte[] byteArray49 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_18.key2(byteArray49, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_67.key2(byteArray77, 0);
        staticSaltsABMC1_52.key2(byteArray77, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray87, (int) '#');
        staticSaltsABMC1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABMC1_52.key2(byteArray87, (int) (short) 0);
        staticSaltsABMC1_18.key2(byteArray87, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray87, (int) (byte) 10);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray25, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_35.key2(byteArray46, (int) (short) 10);
        staticSaltsABMC1_30.key2(byteArray46, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_59.key2(byteArray69, 0);
        staticSaltsABMC1_51.key2(byteArray69, 100);
        staticSaltsABMC1_30.key2(byteArray69, (int) (short) 0);
        byte[] byteArray79 = new byte[] { (byte) 10 };
        staticSaltsABMC1_30.key2(byteArray79, (int) 'a');
        staticSaltsABMC1_9.key2(byteArray79, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_9.key2(byteArray86, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray86, (int) ' ');
        java.lang.Class<?> wildcardClass93 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_34.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_34.key2(byteArray59, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        staticSaltsABMC1_34.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray79, 10);
        staticSaltsABMC1_34.key2(byteArray79, (int) (byte) -1);
        staticSaltsABMC1_19.key2(byteArray79, 100);
        staticSaltsABMC1_0.key2(byteArray79, (int) 'a');
        byte[] byteArray88 = null;
        staticSaltsABMC1_0.key2(byteArray88, (int) (short) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray16, 10);
        staticSaltsABMC1_8.key2(byteArray16, 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_44.key2(byteArray62, 100);
        staticSaltsABMC1_23.key2(byteArray62, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray62, (int) (byte) 1);
        byte[] byteArray73 = null;
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_5.key2(byteArray15, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_20.key2(byteArray30, 0);
        staticSaltsABMC1_5.key2(byteArray30, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_5.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray40, 100);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray46, 10);
        staticSaltsABMC1_38.key2(byteArray46, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_59.key2(byteArray70, (int) (short) 10);
        staticSaltsABMC1_51.key2(byteArray70, (int) 'a');
        staticSaltsABMC1_38.key2(byteArray70, 1);
        staticSaltsABMC1_37.key2(byteArray70, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray70, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_81.key2(byteArray84, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray84, (int) (byte) 1);
        byte[] byteArray91 = null;
        staticSaltsABMC1_0.key2(byteArray91, (int) (byte) -1);
        byte[] byteArray94 = null;
        staticSaltsABMC1_0.key2(byteArray94, (-1));
        byte[] byteArray97 = null;
        staticSaltsABMC1_0.key2(byteArray97, (int) (byte) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) 'a');
        byte[] byteArray17 = null;
        staticSaltsABMC1_0.key2(byteArray17, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_20.key2(byteArray31, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_34.key2(byteArray52, 100);
        byte[] byteArray65 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_34.key2(byteArray65, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_68.key2(byteArray75, (int) (byte) 10);
        staticSaltsABMC1_34.key2(byteArray75, (int) (short) -1);
        staticSaltsABMC1_20.key2(byteArray75, 0);
        staticSaltsABMC1_0.key2(byteArray75, (int) (short) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_0.key2(byteArray15, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_18.key2(byteArray25, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_45.key2(byteArray55, 0);
        staticSaltsABMC1_30.key2(byteArray55, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        staticSaltsABMC1_30.key2(byteArray65, (int) (short) 0);
        staticSaltsABMC1_18.key2(byteArray65, 10);
        staticSaltsABMC1_0.key2(byteArray65, (int) (byte) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_24.key2(byteArray34, 0);
        staticSaltsABMC1_23.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_41.key2(byteArray52, (int) (byte) 1);
        staticSaltsABMC1_23.key2(byteArray52, (int) (byte) 0);
        staticSaltsABMC1_18.key2(byteArray52, (-1));
        staticSaltsABMC1_0.key2(byteArray52, (int) '4');
        byte[] byteArray65 = null;
        staticSaltsABMC1_0.key2(byteArray65, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_68.key2(byteArray79, (int) (short) 10);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_68.key2(byteArray88, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray88, 1);
        java.lang.Class<?> wildcardClass93 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        byte[] byteArray47 = null;
        staticSaltsABMC1_0.key2(byteArray47, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray58, 10);
        staticSaltsABMC1_50.key2(byteArray58, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_71.key2(byteArray82, (int) (short) 10);
        staticSaltsABMC1_63.key2(byteArray82, (int) 'a');
        staticSaltsABMC1_50.key2(byteArray82, 1);
        staticSaltsABMC1_0.key2(byteArray82, (int) '#');
        java.lang.Class<?> wildcardClass91 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray30, 10);
        staticSaltsABMC1_22.key2(byteArray30, 10);
        staticSaltsABMC1_8.key2(byteArray30, (int) (short) 10);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_8.key2(byteArray41, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray57, 10);
        staticSaltsABMC1_49.key2(byteArray57, 10);
        staticSaltsABMC1_0.key2(byteArray57, (int) ' ');
        java.lang.Class<?> wildcardClass64 = byteArray57.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_12.key2(byteArray22, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_27.key2(byteArray37, 0);
        staticSaltsABMC1_12.key2(byteArray37, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        staticSaltsABMC1_12.key2(byteArray47, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray47, 10);
        byte[] byteArray56 = null;
        staticSaltsABMC1_0.key2(byteArray56, 1);
        byte[] byteArray59 = null;
        staticSaltsABMC1_0.key2(byteArray59, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_62.key2(byteArray69, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_75.key2(byteArray78, (int) (short) 0);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_75.key2(byteArray86, (int) (short) 10);
        staticSaltsABMC1_74.key2(byteArray86, (int) (short) 0);
        staticSaltsABMC1_62.key2(byteArray86, 0);
        staticSaltsABMC1_0.key2(byteArray86, (int) '4');
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray16, 10);
        staticSaltsABMC1_8.key2(byteArray16, 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (short) 1);
        byte[] byteArray23 = null;
        staticSaltsABMC1_0.key2(byteArray23, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_26.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_26.key2(byteArray36, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_41.key2(byteArray51, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_56.key2(byteArray66, 0);
        staticSaltsABMC1_41.key2(byteArray66, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        staticSaltsABMC1_41.key2(byteArray76, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray86, 10);
        staticSaltsABMC1_41.key2(byteArray86, (int) (byte) -1);
        staticSaltsABMC1_26.key2(byteArray86, 100);
        staticSaltsABMC1_0.key2(byteArray86, (int) '#');
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_43.key2(byteArray53, 0);
        staticSaltsABMC1_42.key2(byteArray53, (int) (byte) 1);
        staticSaltsABMC1_34.key2(byteArray53, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_62.key2(byteArray69, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_75.key2(byteArray78, (int) (short) 0);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_75.key2(byteArray86, (int) (short) 10);
        staticSaltsABMC1_74.key2(byteArray86, (int) (short) 0);
        staticSaltsABMC1_62.key2(byteArray86, 0);
        staticSaltsABMC1_34.key2(byteArray86, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray86, (int) (byte) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_0.key2(byteArray15, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_18.key2(byteArray25, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_30.key2(byteArray42, (int) (short) 0);
        staticSaltsABMC1_18.key2(byteArray42, 0);
        staticSaltsABMC1_0.key2(byteArray42, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_51.key2(byteArray62, (int) (short) 10);
        byte[] byteArray65 = null;
        staticSaltsABMC1_51.key2(byteArray65, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_68.key2(byteArray78, 0);
        staticSaltsABMC1_51.key2(byteArray78, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray91 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_85.key2(byteArray91, (int) (short) 0);
        staticSaltsABMC1_51.key2(byteArray91, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray91, (int) '4');
        java.lang.Class<?> wildcardClass98 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray30, 10);
        staticSaltsABMC1_22.key2(byteArray30, 10);
        staticSaltsABMC1_8.key2(byteArray30, (int) (short) 10);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_8.key2(byteArray41, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray41, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_54.key2(byteArray64, 0);
        staticSaltsABMC1_46.key2(byteArray64, 100);
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray81, 10);
        staticSaltsABMC1_73.key2(byteArray81, 10);
        staticSaltsABMC1_0.key2(byteArray81, (int) (short) -1);
        java.lang.Class<?> wildcardClass88 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        byte[] byteArray6 = null;
        staticSaltsABMC1_0.key2(byteArray6, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_9.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray26, 10);
        staticSaltsABMC1_18.key2(byteArray26, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray50, (int) 'a');
        staticSaltsABMC1_18.key2(byteArray50, 1);
        staticSaltsABMC1_9.key2(byteArray50, (-1));
        staticSaltsABMC1_0.key2(byteArray50, 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_22.key2(byteArray29, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_35.key2(byteArray46, (int) (short) 10);
        staticSaltsABMC1_34.key2(byteArray46, (int) (short) 0);
        staticSaltsABMC1_22.key2(byteArray46, 0);
        byte[] byteArray53 = null;
        staticSaltsABMC1_22.key2(byteArray53, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_64.key2(byteArray74, 0);
        staticSaltsABMC1_56.key2(byteArray74, 100);
        byte[] byteArray87 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_56.key2(byteArray87, (int) (byte) 1);
        staticSaltsABMC1_22.key2(byteArray87, 1);
        staticSaltsABMC1_0.key2(byteArray87, (int) (byte) 10);
        byte[] byteArray94 = null;
        staticSaltsABMC1_0.key2(byteArray94, (int) (short) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABMC1_12.key2(byteArray14, (int) '#');
        staticSaltsABMC1_11.key2(byteArray14, (int) (short) 0);
        byte[] byteArray19 = null;
        staticSaltsABMC1_11.key2(byteArray19, (int) (short) 100);
        byte[] byteArray22 = null;
        staticSaltsABMC1_11.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_33.key2(byteArray43, 0);
        staticSaltsABMC1_25.key2(byteArray43, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_58.key2(byteArray68, 0);
        staticSaltsABMC1_50.key2(byteArray68, 100);
        byte[] byteArray81 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_50.key2(byteArray81, (int) (byte) 1);
        staticSaltsABMC1_25.key2(byteArray81, (int) (byte) 10);
        staticSaltsABMC1_11.key2(byteArray81, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray81, (int) (byte) -1);
        byte[] byteArray90 = null;
        staticSaltsABMC1_0.key2(byteArray90, (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_27.key2(byteArray37, 0);
        staticSaltsABMC1_19.key2(byteArray37, 100);
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_19.key2(byteArray50, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray61, 10);
        staticSaltsABMC1_53.key2(byteArray61, 10);
        staticSaltsABMC1_19.key2(byteArray61, (int) '4');
        staticSaltsABMC1_0.key2(byteArray61, (int) 'a');
        java.lang.Class<?> wildcardClass70 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_33.key2(byteArray43, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_64.key2(byteArray75, (int) (short) 10);
        staticSaltsABMC1_56.key2(byteArray75, (int) 'a');
        staticSaltsABMC1_48.key2(byteArray75, 100);
        staticSaltsABMC1_33.key2(byteArray75, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray75, 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_0.key2(byteArray63, (int) '#');
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, (int) '4');
        byte[] byteArray73 = null;
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 1);
        byte[] byteArray76 = null;
        staticSaltsABMC1_0.key2(byteArray76, (int) (short) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray32, 10);
        staticSaltsABMC1_24.key2(byteArray32, 10);
        staticSaltsABMC1_16.key2(byteArray32, (int) (short) 1);
        byte[] byteArray39 = null;
        staticSaltsABMC1_16.key2(byteArray39, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_42.key2(byteArray59, (-1));
        staticSaltsABMC1_16.key2(byteArray59, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray59, (int) (byte) 10);
        java.lang.Class<?> wildcardClass68 = byteArray59.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray41, (int) (short) -1);
        byte[] byteArray48 = null;
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) 100);
        byte[] byteArray51 = null;
        staticSaltsABMC1_0.key2(byteArray51, (int) (byte) 0);
        byte[] byteArray54 = null;
        staticSaltsABMC1_0.key2(byteArray54, (int) (byte) 1);
        java.lang.Class<?> wildcardClass57 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_34.key2(byteArray50, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_66.key2(byteArray76, 0);
        staticSaltsABMC1_65.key2(byteArray76, (int) (byte) 1);
        staticSaltsABMC1_57.key2(byteArray76, 0);
        staticSaltsABMC1_0.key2(byteArray76, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray93 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_87.key2(byteArray93, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray93, 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_24.key2(byteArray31, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABMC1_36.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_24.key2(byteArray48, 0);
        staticSaltsABMC1_0.key2(byteArray48, (int) 'a');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray27, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray33, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_30.key2(byteArray38, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray38, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_45.key2(byteArray52, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_58.key2(byteArray69, (int) (short) 10);
        staticSaltsABMC1_57.key2(byteArray69, (int) (short) 0);
        staticSaltsABMC1_45.key2(byteArray69, 0);
        staticSaltsABMC1_0.key2(byteArray69, (int) (byte) 100);
        java.lang.Class<?> wildcardClass78 = byteArray69.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_5.key2(byteArray15, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_20.key2(byteArray30, 0);
        staticSaltsABMC1_5.key2(byteArray30, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_5.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray40, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        staticSaltsABMC1_49.key2(byteArray67, 100);
        byte[] byteArray80 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_49.key2(byteArray80, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray80, (int) (short) 100);
        byte[] byteArray85 = null;
        staticSaltsABMC1_0.key2(byteArray85, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_88 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_88.key2(byteArray91, 10);
        staticSaltsABMC1_0.key2(byteArray91, (int) (short) 0);
        java.lang.Class<?> wildcardClass96 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray25, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_38.key2(byteArray48, 0);
        staticSaltsABMC1_30.key2(byteArray48, 100);
        staticSaltsABMC1_9.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        staticSaltsABMC1_9.key2(byteArray67, (int) '#');
        byte[] byteArray75 = new byte[] { (byte) 10 };
        staticSaltsABMC1_9.key2(byteArray75, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray75, (int) (short) 10);
        byte[] byteArray80 = null;
        staticSaltsABMC1_0.key2(byteArray80, (int) (byte) -1);
        byte[] byteArray83 = null;
        staticSaltsABMC1_0.key2(byteArray83, (int) (byte) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray22, 10);
        staticSaltsABMC1_0.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray35, 10);
        staticSaltsABMC1_27.key2(byteArray35, 10);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 1);
        java.lang.Class<?> wildcardClass42 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        staticSaltsABMC1_13.key2(byteArray31, 100);
        byte[] byteArray44 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_13.key2(byteArray44, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_47.key2(byteArray54, (int) (byte) 10);
        staticSaltsABMC1_13.key2(byteArray54, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray54, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_0.key2(byteArray65, (int) (short) 1);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray35 = null;
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_54.key2(byteArray65, (int) (short) 10);
        staticSaltsABMC1_46.key2(byteArray65, (int) 'a');
        staticSaltsABMC1_38.key2(byteArray65, 100);
        byte[] byteArray72 = null;
        staticSaltsABMC1_38.key2(byteArray72, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_75.key2(byteArray78, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_83.key2(byteArray86, (int) (short) 0);
        staticSaltsABMC1_75.key2(byteArray86, 1);
        staticSaltsABMC1_38.key2(byteArray86, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray86, (int) (byte) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        staticSaltsABMC1_36.key2(byteArray47, (int) (byte) 1);
        staticSaltsABMC1_18.key2(byteArray47, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray61, 10);
        staticSaltsABMC1_0.key2(byteArray61, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_66.key2(byteArray77, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray77, 100);
        java.lang.Class<?> wildcardClass82 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) 100);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_33.key2(byteArray40, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray57, (int) (short) 0);
        staticSaltsABMC1_33.key2(byteArray57, 0);
        byte[] byteArray64 = null;
        staticSaltsABMC1_33.key2(byteArray64, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        staticSaltsABMC1_33.key2(byteArray70, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray70, (int) '4');
        java.lang.Class<?> wildcardClass79 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABMC1_12.key2(byteArray14, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray20, 10);
        staticSaltsABMC1_12.key2(byteArray20, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_12.key2(byteArray44, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_12.key2(byteArray53, 0);
        byte[] byteArray58 = null;
        staticSaltsABMC1_12.key2(byteArray58, (int) (byte) -1);
        byte[] byteArray61 = null;
        staticSaltsABMC1_12.key2(byteArray61, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_72.key2(byteArray83, (int) (short) 10);
        staticSaltsABMC1_64.key2(byteArray83, (int) 'a');
        staticSaltsABMC1_12.key2(byteArray83, (int) '4');
        staticSaltsABMC1_0.key2(byteArray83, 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray21, 10);
        staticSaltsABMC1_13.key2(byteArray21, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_26.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_34.key2(byteArray45, (int) (short) 10);
        staticSaltsABMC1_26.key2(byteArray45, (int) 'a');
        staticSaltsABMC1_13.key2(byteArray45, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_13.key2(byteArray54, 0);
        byte[] byteArray59 = null;
        staticSaltsABMC1_13.key2(byteArray59, (int) (byte) -1);
        byte[] byteArray62 = null;
        staticSaltsABMC1_13.key2(byteArray62, (int) (byte) 1);
        byte[] byteArray65 = null;
        staticSaltsABMC1_13.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        staticSaltsABMC1_13.key2(byteArray71, (int) (byte) 100);
        byte[] byteArray78 = null;
        staticSaltsABMC1_13.key2(byteArray78, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_81.key2(byteArray84, (int) (short) 0);
        staticSaltsABMC1_13.key2(byteArray84, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray84, (int) (byte) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_12.key2(byteArray23, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray34, 10);
        staticSaltsABMC1_26.key2(byteArray34, 10);
        staticSaltsABMC1_12.key2(byteArray34, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray34, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        staticSaltsABMC1_43.key2(byteArray61, 100);
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_43.key2(byteArray74, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray74, (-1));
        byte[] byteArray79 = null;
        staticSaltsABMC1_0.key2(byteArray79, (int) (short) 100);
        java.lang.Class<?> wildcardClass82 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray52, (int) 'a');
        staticSaltsABMC1_25.key2(byteArray52, 100);
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray64, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_71.key2(byteArray81, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_71.key2(byteArray88, (-1));
        staticSaltsABMC1_0.key2(byteArray88, (int) ' ');
        byte[] byteArray95 = null;
        staticSaltsABMC1_0.key2(byteArray95, 0);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_16.key2(byteArray23, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_28.key2(byteArray39, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        staticSaltsABMC1_46.key2(byteArray57, (int) (byte) 1);
        staticSaltsABMC1_28.key2(byteArray57, (int) (byte) 0);
        staticSaltsABMC1_16.key2(byteArray57, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray76, 10);
        staticSaltsABMC1_68.key2(byteArray76, 10);
        byte[] byteArray81 = null;
        staticSaltsABMC1_68.key2(byteArray81, (int) (byte) 10);
        byte[] byteArray84 = null;
        staticSaltsABMC1_68.key2(byteArray84, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_87.key2(byteArray90, 10);
        staticSaltsABMC1_68.key2(byteArray90, (int) (short) 0);
        staticSaltsABMC1_16.key2(byteArray90, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray90, (int) 'a');
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        staticSaltsABMC1_21.key2(byteArray29, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_42.key2(byteArray53, (int) (short) 10);
        staticSaltsABMC1_34.key2(byteArray53, (int) 'a');
        staticSaltsABMC1_21.key2(byteArray53, 1);
        staticSaltsABMC1_0.key2(byteArray53, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_62.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray87, 10);
        staticSaltsABMC1_79.key2(byteArray87, 10);
        staticSaltsABMC1_62.key2(byteArray87, (int) '4');
        staticSaltsABMC1_0.key2(byteArray87, (int) ' ');
        byte[] byteArray96 = null;
        staticSaltsABMC1_0.key2(byteArray96, (int) (byte) 10);
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        staticSaltsABMC1_15.key2(byteArray42, 100);
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 10);
        byte[] byteArray51 = null;
        staticSaltsABMC1_0.key2(byteArray51, 100);
        byte[] byteArray54 = null;
        staticSaltsABMC1_0.key2(byteArray54, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        staticSaltsABMC1_0.key2(byteArray67, (int) '4');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        byte[] byteArray47 = null;
        staticSaltsABMC1_0.key2(byteArray47, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray58, 10);
        staticSaltsABMC1_50.key2(byteArray58, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_71.key2(byteArray82, (int) (short) 10);
        staticSaltsABMC1_63.key2(byteArray82, (int) 'a');
        staticSaltsABMC1_50.key2(byteArray82, 1);
        staticSaltsABMC1_0.key2(byteArray82, (int) '#');
        byte[] byteArray91 = null;
        staticSaltsABMC1_0.key2(byteArray91, 10);
        java.lang.Class<?> wildcardClass94 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticSaltsABMC1_11.key2(byteArray13, (int) '#');
        staticSaltsABMC1_10.key2(byteArray13, (int) (short) 0);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_10.key2(byteArray21, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray21, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray21, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_29.key2(byteArray40, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_52.key2(byteArray63, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_71.key2(byteArray81, 0);
        staticSaltsABMC1_70.key2(byteArray81, (int) (byte) 1);
        staticSaltsABMC1_52.key2(byteArray81, (int) (byte) 0);
        staticSaltsABMC1_47.key2(byteArray81, (-1));
        staticSaltsABMC1_29.key2(byteArray81, (int) '4');
        staticSaltsABMC1_28.key2(byteArray81, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray81, (int) (short) -1);
        java.lang.Class<?> wildcardClass98 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_33.key2(byteArray43, 0);
        staticSaltsABMC1_25.key2(byteArray43, 100);
        byte[] byteArray56 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_25.key2(byteArray56, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray56, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_61.key2(byteArray71, 0);
        staticSaltsABMC1_0.key2(byteArray71, (int) (byte) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_22.key2(byteArray32, 0);
        staticSaltsABMC1_21.key2(byteArray32, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_40.key2(byteArray50, 0);
        staticSaltsABMC1_39.key2(byteArray50, (int) (byte) 1);
        staticSaltsABMC1_21.key2(byteArray50, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) 1);
        byte[] byteArray61 = null;
        staticSaltsABMC1_0.key2(byteArray61, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_65.key2(byteArray75, 0);
        staticSaltsABMC1_64.key2(byteArray75, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray75, (int) (short) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        staticSaltsABMC1_15.key2(byteArray42, 100);
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 10);
        byte[] byteArray51 = null;
        staticSaltsABMC1_0.key2(byteArray51, 100);
        byte[] byteArray54 = null;
        staticSaltsABMC1_0.key2(byteArray54, 0);
        byte[] byteArray57 = null;
        staticSaltsABMC1_0.key2(byteArray57, (int) (short) -1);
        java.lang.Class<?> wildcardClass60 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        staticSaltsABMC1_21.key2(byteArray29, 10);
        staticSaltsABMC1_0.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_36.key2(byteArray47, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_36.key2(byteArray61, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_74.key2(byteArray84, 0);
        staticSaltsABMC1_66.key2(byteArray84, 100);
        staticSaltsABMC1_36.key2(byteArray84, 1);
        staticSaltsABMC1_0.key2(byteArray84, (int) (byte) -1);
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) 0);
        byte[] byteArray53 = null;
        staticSaltsABMC1_0.key2(byteArray53, (int) '#');
        java.lang.Class<?> wildcardClass56 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABMC1_19.key2(byteArray35, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray43, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_40.key2(byteArray48, (int) (short) 1);
        staticSaltsABMC1_19.key2(byteArray48, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_55.key2(byteArray66, (int) (short) 10);
        staticSaltsABMC1_19.key2(byteArray66, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray66, (int) (byte) 100);
        java.lang.Class<?> wildcardClass73 = byteArray66.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_21.key2(byteArray38, (-1));
        staticSaltsABMC1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) 1);
        byte[] byteArray55 = null;
        staticSaltsABMC1_0.key2(byteArray55, (int) (byte) 1);
        byte[] byteArray58 = null;
        staticSaltsABMC1_0.key2(byteArray58, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray64, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_61.key2(byteArray69, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray69, (int) '#');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_15.key2(byteArray26, (int) (short) 10);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_15.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_38.key2(byteArray45, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_51.key2(byteArray62, (int) (short) 10);
        staticSaltsABMC1_50.key2(byteArray62, (int) (short) 0);
        staticSaltsABMC1_38.key2(byteArray62, 0);
        staticSaltsABMC1_15.key2(byteArray62, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray62, (int) '#');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray61, (int) (byte) 0);
        staticSaltsABMC1_5.key2(byteArray61, 0);
        staticSaltsABMC1_0.key2(byteArray61, (int) (short) 1);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_73.key2(byteArray80, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray80, 0);
        byte[] byteArray87 = null;
        staticSaltsABMC1_0.key2(byteArray87, (int) 'a');
        byte[] byteArray90 = null;
        staticSaltsABMC1_0.key2(byteArray90, 1);
        byte[] byteArray93 = null;
        staticSaltsABMC1_0.key2(byteArray93, (int) '4');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_17.key2(byteArray27, 0);
        staticSaltsABMC1_0.key2(byteArray27, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_34.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray40, (int) (short) 1);
        byte[] byteArray45 = null;
        staticSaltsABMC1_0.key2(byteArray45, 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray45, 10);
        staticSaltsABMC1_0.key2(byteArray45, (int) (byte) -1);
        byte[] byteArray50 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray50, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_61.key2(byteArray71, 0);
        staticSaltsABMC1_53.key2(byteArray71, 100);
        staticSaltsABMC1_0.key2(byteArray71, 0);
        byte[] byteArray80 = null;
        staticSaltsABMC1_0.key2(byteArray80, (int) (short) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray59, (int) 'a');
        staticSaltsABMC1_32.key2(byteArray59, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_71.key2(byteArray82, (int) (short) 10);
        staticSaltsABMC1_66.key2(byteArray82, (int) (byte) 0);
        staticSaltsABMC1_32.key2(byteArray82, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray82, (int) '4');
        byte[] byteArray91 = null;
        staticSaltsABMC1_0.key2(byteArray91, (int) ' ');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray17, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_14.key2(byteArray22, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray22, 0);
        java.lang.Class<?> wildcardClass29 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_40.key2(byteArray51, (int) (short) 10);
        staticSaltsABMC1_35.key2(byteArray51, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray59, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_56.key2(byteArray64, (int) (short) 1);
        staticSaltsABMC1_35.key2(byteArray64, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray64, (int) (short) -1);
        java.lang.Class<?> wildcardClass73 = byteArray64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }
}

